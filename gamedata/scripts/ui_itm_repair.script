-- ui_itm_repair
-- Alundaio
-------------------------------------------------------------------
class "load_item" (CUIListBoxItem)
function load_item:__init(height) super(height)
	self.file_name		= "filename"

	self:SetTextColor(GetARGB(255, 170, 170, 170))

	self.fn = self:GetTextItem()
	self.fn:SetFont(GetFontLetterica18Russian())
	self.fn:SetEllipsis(true)
end

function load_item:__finalize()
end

-------------------------------------------------------------------
class "repair_ui" (CUIScriptWnd)
function repair_ui:__init(owner,obj,section) super()
	self.object = obj
	--self.owner = owner
	self.section = section
	self.next_use_item = alun_utils.parse_list(INI,section,"next_use_item")
	self.use_condition = INI:r_bool_ex(section,"use_condition",false)
	self.uses = self.object:get_remaining_uses() or 0
	self.consume = INI:r_bool_ex(section,"consume_charge_on_use",true)
	self.remove = INI:r_bool_ex(section,"remove_after_use",true)
	self.max_uses = self.object:get_max_uses() or 0
	self.min_condition = INI:r_float_ex(section,"repair_min_condition",0)
	self.max_condition = INI:r_float_ex(section,"repair_max_condition",0)
	self.add_condition = INI:r_float_ex(section,"repair_add_condition",0)
	self.part_bonus = INI:r_float_ex(section,"repair_part_bonus",0)
	self.use_parts = INI:r_bool_ex(section,"repair_use_parts",false)
	self.repair_type = INI:r_string_ex(section,"repair_type") or "all"

	self.repair_only = alun_utils.parse_list(INI,section,"repair_only",true)
	self.repair_refuse = alun_utils.parse_list(INI,section,"repair_refuse",true)

	self.parts_include = alun_utils.parse_list(INI,section,"repair_parts_include",true)
	self.parts_exclude = alun_utils.parse_list(INI,section,"repair_parts_exclude",true)

	self.use_actor_effects = INI:r_bool_ex(section,"repair_use_actor_effects",false)

	self:InitControls()
	self:InitCallBacks()
end

function repair_ui:__finalize()
end

function repair_ui:FillList()
	self.list_box:RemoveAll()

	local function fill_list(actor,obj)
		if not obj then return end
	
		local main_section = INI:r_string_ex(obj:section(),"repair_type") or obj:section()
		if table.size(self.repair_refuse) > 0 and self.repair_refuse[main_section] then return end
		if table.size(self.repair_only ) > 0 and not (self.repair_only[main_section]) then return end

		if (self.repair_type == "weapon" and IsWeapon(obj))
		or (self.repair_type == "outfit" and (IsOutfit(obj) or IsHeadgear(obj)))
		or (self.repair_type == "knife" and obj:clsid() == clsid.wpn_knife_s)
		or (self.repair_type == "all" and (IsWeapon(obj) or IsOutfit(obj) or IsHeadgear(obj))) then
			local con = obj:condition()
			--printf("con = %s",con)
			if (con and con >= self.min_condition and con <= self.max_condition) then
				self:AddItemToList(obj,self.list_box,con)
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function repair_ui:FillPartsList()
	self.list_box_parts:RemoveAll()

	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()
	if not (item) then
		return
	end

	local obj = level.object_by_id(item.item_id)
	local function fill_list(actor,itm)
		if (itm and itm:id() ~= item.item_id) then
			if (self.parts_include and self.parts_include[itm:section()])
			or (self.parts_exclude == nil and string.find(obj:section(),itm:section()))
			or (self.parts_exclude and self.parts_exclude[itm:section()] == nil and string.find(obj:section(),itm:section())) then
				self:AddItemToList(itm,self.list_box_parts,INI:r_float_ex(itm:section(),"repair_part_bonus") or self.part_bonus)
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function repair_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetWndPos			(vector2():set(240,120))

	self:SetAutoDelete(true)

	self.xml				= CScriptXmlInit()
	local ctrl
	self.xml:ParseFile			("ui_itm_main.xml")

	ctrl					= CUIWindow()
	ctrl:SetAutoDelete(true)
	self.xml:InitWindow			("itm_repair:file_item:main",0,ctrl)

	self.file_item_main_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("itm_repair:file_item:fn",0,ctrl)
	self.file_item_fn_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("itm_repair:file_item:fd",0,ctrl)
	self.file_item_fd_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.form				= self.xml:InitStatic("itm_repair:form",self)
	
	--self.form:SetWndPos(vector2():set(device().width/2-(self.form:GetWidth()+70), device().height/2 - self.form:GetHeight()))
	self.form:SetWndPos(vector2():set(0, 0))

	-- Background for forms
	--self.xml:InitStatic("itm_repair:form:list_background",self.form)

	if (self.use_parts) then
		--self.xml:InitStatic("itm_repair:form:list_parts_background",self.form)
	end

	-- Item picture
	self.picture			= self.xml:InitStatic("itm_repair:form:icon",self.form)
	self.picture_parts		= self.xml:InitStatic("itm_repair:form:icon_parts",self.form)

	-- Repair tool picture
	self.pic = self.xml:InitStatic("itm_repair:form:icon_tool",self.form)

	local inv_grid_width = INI:r_float_ex(self.section,"inv_grid_width") or 0 
	local inv_grid_height = INI:r_float_ex(self.section,"inv_grid_height") or 0
	local inv_grid_x = INI:r_float_ex(self.section,"inv_grid_x") or 0
	local inv_grid_y = INI:r_float_ex(self.section,"inv_grid_y") or 0

	local x1 = inv_grid_x*50
	local y1 = inv_grid_y*50

	local w = inv_grid_width*50
	local h = inv_grid_height*50

	local x2 = x1 + w
	local y2 = y1 + h

	local w,h = w,h
	if (utils.is_widescreen()) then
	w,h = w/1.5,h/1.2
	else
	w,h = w/1.3,h/1.3
	end
	self.pic:InitTexture("ui\\ui_icon_equipment")
	self.pic:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.pic:SetWndSize(vector2():set(w,h))

	if not (self.pic.x) then
		local pos = self.pic:GetWndPos()
		local posform = self.form:GetWndPos()
		self.pic.x = pos.x + posform.x
		self.pic.y = pos.y + posform.y
	end

	self.pic:SetWndPos(vector2():set(self.pic.x-w/2, self.pic.y-h/2))

	-- Caption
	self.caption_parts 		= self.xml:InitTextWnd("itm_repair:form:caption_parts",self.form)
	self.caption_repair		= self.xml:InitTextWnd("itm_repair:form:caption_repair",self.form)

	self.xml:InitTextWnd("itm_repair:form:caption_parts_box",self.form)
    self.xml:InitTextWnd("itm_repair:form:caption_repair_box",self.form)
    self.xml:InitTextWnd("itm_repair:form:caption_tool_box",self.form)
	
	-- List Box
	self.xml:InitFrame		("itm_repair:form:list_frame",self.form)

	self.list_box			= self.xml:InitListBox("itm_repair:form:list",self.form)

	self.list_box:ShowSelectedItem	(true)
	self:Register			(self.list_box, "list_window")

	if (self.use_parts) then
		-- Parts List Box
		self.list_pos = self.list_box:GetWndPos()

		self.list_box_parts	= self.xml:InitListBox("itm_repair:form:list_parts",self.form)
		--self.list_box_parts:SetWndPos(vector2():set(self.list_pos.x+self.list_box:GetWidth()+5, self.list_pos.y))

		local frame = self.xml:InitFrame("itm_repair:form:list_frame_parts",self.form)
		--frame:SetWndPos(vector2():set(self.list_pos.x+self.list_box:GetWidth()+5, self.list_pos.y))

		self.list_box_parts:ShowSelectedItem(true)
		self:Register(self.list_box_parts, "list_window_parts")
	else
		--self.form:SetWndSize(vector2():set(self.list_box:GetWidth()+35, self.form:GetHeight()))
	end
	-- Button Repair
	ctrl					= self.xml:Init3tButton("itm_repair:form:btn_repair",	self.form)
	self:Register			(ctrl, "button_repair")

	-- Button Cancel
	ctrl = self.xml:Init3tButton	("itm_repair:form:btn_cancel",	self.form)
	self:Register			(ctrl, "button_back")
end

function repair_ui:InitCallBacks()
	self:AddCallback("button_repair",		ui_events.BUTTON_CLICKED,         self.OnButton_repair,			self)
	self:AddCallback("button_back",		ui_events.BUTTON_CLICKED,             self.OnButton_back_clicked,	self)

	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked,		self)

	self:AddCallback("list_window_parts", ui_events.LIST_ITEM_CLICKED, 		  self.OnPartsListItemClicked,		self)
	self:AddCallback("list_window_parts", ui_events.WINDOW_LBUTTON_DB_CLICK,  self.OnPartsListItemDbClicked,	self)
end

function repair_ui:OnPartsListItemClicked()
	if self.list_box_parts:GetSize()==0 then return end

	local item = self.list_box_parts:GetSelectedItem()
	if not (item) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_parts:SetText("")
		return
	end

	local se_item = item.item_id and alife_object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_box_parts:RemoveItem(item)
		return
	end

	local sec = se_item:section_name()
	local part_bonus = INI:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
	local con = math.floor((self.add_condition + part_bonus)*100)
	self.caption_repair:SetText("+"..con.."%")

	local w,h = item.width,item.height
	if (utils.is_widescreen()) then
	w,h = item.width/1.5,item.height/1.2
	else
	w,h = item.width/1.2,item.height/1.2
	end
	self.picture_parts:InitTexture("ui\\ui_icon_equipment")
	self.picture_parts:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture_parts:SetWndSize(vector2():set(w,h))

	if not (self.picture_parts.x) then
		local pos = self.picture_parts:GetWndPos()
		self.picture_parts.x = pos.x
		self.picture_parts.y = pos.y
	end

	self.picture_parts:SetWndPos(vector2():set(self.picture_parts.x-w/2, self.picture_parts.y-h/2))

	self.caption_parts:SetText(game.translate_string("kb_use"))
end

function repair_ui:OnPartsListItemDbClicked()
	self:OnButton_repair()
end

function repair_ui:OnListItemClicked()
	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()

	if not (item) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = alife_object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_box:RemoveItem(item)
		return
	end

	local w,h = item.width,item.height
	if (utils.is_widescreen()) then
	w,h = item.width/1.5,item.height/1.2
	else
	w,h = item.width/1.2,item.height/1.2
	end
	self.picture:InitTexture("ui\\ui_icon_equipment")
	self.picture:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture:SetWndSize(vector2():set(w,h))

	if not (self.picture.x) then
		local pos = self.picture:GetWndPos()
		self.picture.x = pos.x
		self.picture.y = pos.y
	end

	self.picture:SetWndPos(vector2():set(self.picture.x-w/2, self.picture.y-h/2))


	local con = math.floor(self.add_condition*100)
	self.caption_repair:SetText("+"..con.."%")

	if (self.use_parts) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_parts:SetText("")
		self:FillPartsList()
	end
end

function repair_ui:OnListItemDbClicked()
	self:OnButton_repair()
end

function repair_ui:OnButton_back_clicked()
	if self.remove == true and self.use_condition then
		if self.consume == true then
			if self.uses == 1 then
				local se_item = alife():create(self.section,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
				if se_item then
					level_get_object(se_item.id, function(obj)
						obj:set_remaining_uses(1)
					end, 400)
				end
			else
				self.object:set_remaining_uses(self.uses)
			end
		else
			self.object:set_remaining_uses(self.uses)
		end
	end
	self:HideDialog()
end

function repair_ui:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_RETURN) then

		elseif (dik == DIK_keys.DIK_ESCAPE) then
			self:OnButton_back_clicked()
		end
	end
	return true
end

function repair_ui:OnButton_repair()
	--A.R.E.A. Skills
	area_skills.raise_skill("repair_skill",0.05)
	------------------// choose item to be repaired //--------------------
	local index = self.list_box:GetSelectedIndex()
	if index == -1 then return end
	local item  = self.list_box:GetItemByIndex(index)
	local obj = item and level.object_by_id(item.item_id)
	if not (obj) then
		return
	end

	local function NextItem()
		alife():release(alife_object(self.object:id()))
		if (#self.next_use_item > 0) then
			if self.next_use_item[#self.next_use_item] == "random" then
				alife():create(self.next_use_item[math.random(#self.next_use_item-1)], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
			else
				for i=1, #self.next_use_item do
					alife():create(self.next_use_item[i], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
				end
			end
		end
	end
	------------------// use/remove used item //--------------------
	if self.remove then 
		if self.use_condition then
			if self.uses > 1 then
				self.uses = self.uses - 1
				self.object:set_remaining_uses(self.uses)
			else
				NextItem()
			end
		else
			NextItem()
		end
	end
    ------------------// use/remove list repair parts (add bonus condition)//--------------------
	local bonus = 0
	index = self.list_box_parts:GetSelectedIndex()
	item = index and (index ~= -1) and self.list_box_parts:GetItemByIndex(index)
	local se_parts = item and item.item_id and alife_object(item.item_id)
	
	if (se_parts) then
		local sec = se_parts:section_name()
--		news_manager.send_tip(db.actor, game.translate_string(sec), nil, nil, nil, 10000)
		bonus = INI:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
		if INI:r_bool_ex(sec,"remove_after_use",true) then
			if INI:r_bool_ex(sec,"use_condition") then
				local object = level.object_by_id(item.item_id)
				if object and (object:get_remaining_uses() > 1) then
					object:set_remaining_uses(object:get_remaining_uses()-1)
				elseif (sec~="wpn_crowbar" or sec~="wpn_hammer" or sec~="wpn_knife_swiss") then
					alife():release(se_parts,true)
					local next_items = alun_utils.parse_list(INI,sec,"next_use_item")
					if (#next_items > 0) then
						alife():release(se_parts,true)
						if next_items[#next_items] == "random" then
							alife():create(next_items[math.random(#next_items-1)], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
						else
							for i=1, #next_items do
								alife():create(next_items[i], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
							end
						end
					end
				end
			else
				alife():release(se_parts,true)
				local next_items = alun_utils.parse_list(INI,sec,"next_use_item")
				if (#next_items > 0) then
					alife():release(se_parts,true)
					if next_items[#next_items] == "random" then
						alife():create(next_items[math.random(#next_items-1)], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
					else
						for i=1, #next_items do
							alife():create(next_items[i], db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
						end
					end
				end
			end
		end
	end
	
	-----------------// change condition of repaired item //---------------------
	local con = obj:condition()
	--printf("pre condition:%s addition:%s bonus:%s",con,self.add_condition,bonus)
	con = con + self.add_condition + bonus
	con = con + (math.floor(area_skills.skills_table["repair_skill"])*0.01) 
	con = con <= 1 and con or 1
	obj:set_condition(con)

	self:HideDialog()

	if (self.use_actor_effects and actor_effects) then
		actor_effects.use_item(self.section.."_dummy")
		level_weathers.get_weather_manager():forced_weather_change()
	end
	
	ActorMenu.get_actor_menu():UpdateConditionProgressBars()
end

function repair_ui:AddItemToList(item,listbox,condition)
	local _itm			= load_item(self.file_item_main_sz.y)
	local sec = item and item:section()
	local inv_name 		= item and game.translate_string(INI:r_string_ex(sec,"inv_name") or "none")

	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(inv_name)

	condition = math.ceil(condition*100)
	if (item) then
		_itm.fage     = _itm:AddTextField("+"..condition.."%", self.file_item_fd_sz.x)
		_itm.fage:SetFont	(GetFontLetterica16Russian())
		_itm.fage:SetWndPos	(vector2():set(self.file_item_fn_sz.x+4, 0))
		_itm.fage:SetWndSize(self.file_item_fd_sz)

		_itm.item_id = item:id()

		local inv_grid_width = INI:r_float_ex(sec,"inv_grid_width") or 0
		local inv_grid_height = INI:r_float_ex(sec,"inv_grid_height") or 0
		local inv_grid_x = INI:r_float_ex(sec,"inv_grid_x") or 0
		local inv_grid_y = INI:r_float_ex(sec,"inv_grid_y") or 0

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end

	--[[
	_itm.picture = self.xml:InitStatic("itm_repair:form:picture",self.form)
	_itm.picture:InitTexture("ui\\ui_icon_equipment")
	_itm.picture:SetTextureRect(Frect():set(_itm.x1,_itm.y1,_itm.x2,_itm.y2))
	_itm.picture:SetWndSize(vector2():set(inv_grid_width*50,inv_grid_height*50))
	--]]

	listbox:AddExistingItem(_itm)
end