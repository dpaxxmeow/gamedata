task_ini = ini_file("misc\\task_manager.ltx")
local random_task = nil
is_on_complete = true

class "CRandomTask"
function CRandomTask:__init()
	--' Таблица проинициализированных квестов.
	self.task_info = {}
end
-- Save
function CRandomTask:save(packet)
	if (USE_MARSHAL) then 
		return 
	end 
	
	set_save_marker(packet, "save", false, "CRandomTask")
	local n = table.size(self.task_info)
	packet:w_u16(n)
	for k,v in pairs(self.task_info) do
		packet:w_stringZ(k)
		self.task_info[k]:save(packet)
	end

	set_save_marker(packet, "save", true, "CRandomTask")
end
-- Load
function CRandomTask:load(reader)
	if (USE_MARSHAL) then 
		return 
	end 
	
	set_save_marker(reader, "load", false, "CRandomTask")

	local n = reader:r_u16()
	for i=1,n do
		local id = reader:r_stringZ()
		printf("task_manager: loaded %s",id)
		local obj = task_objects.CGeneralTask(id)
		obj:load(reader)
		self.task_info[id] = obj
	end

	set_save_marker(reader, "load", true, "CRandomTask")
end
--------------------------------------------------------------------------------

-- Выдача квеста игроку
function CRandomTask:give_task(task_id,task_giver_id)
	--printf("CRandomTask:give_task() task_id[%s]", tostring(task_id))

	if not task_ini:section_exist(task_id) then
		printf("There is no task [%s] in task ini_file or ini_file is not included!!!", task_id)
		return
	end
	
	if (self.task_info[task_id]) then 
		printf("task_manager: ERROR: TASK ALREADY EXISTS!!!")
	end
	
	if (USE_MARSHAL) then 
		local m_data = alife_storage_manager.get_state()
		if (m_data.task_objects and m_data.task_objects[task_id]) then
			printf("task_manager: WARNING: task data already existed for %s",task_id)
			m_data.task_objects[task_id] = nil
		end
		
		self.task_info[task_id] = task_objects.CGeneralTask(task_id)
		self.task_info[task_id]:give_task()
		self.task_info[task_id].task_giver_id = task_giver_id
		self.task_info[task_id].is_timeout_half_sent = false
		self.task_info[task_id].is_timeout_soon = false
		self.task_info[task_id].is_first_update = false
		
		--self.task_info[task_id]:save_state(m_data)
		return
	end
	
	self.task_info[task_id] = task_objects.CGeneralTask(task_id)
	self.task_info[task_id]:give_task()
	self.task_info[task_id].task_giver_id = task_giver_id
end

function CRandomTask:set_task_completed(task_id)
	if (self.task_info[task_id]) then 
		self.task_info[task_id].forced_status = "complete"
	end
end

function CRandomTask:set_task_failed(task_id)
	if (self.task_info[task_id]) then 
		self.task_info[task_id].forced_status = "fail"
	end
end

function CRandomTask:set_task_cancelled(task_id)
    if (self.task_info[task_id]) then
		self.task_info[task_id].forced_status = "cancel"
		self.task_info[task_id].cancelled_by_actor = true
    end
end

function CRandomTask:set_task_reversed(task_id)
    if (self.task_info[task_id]) then
		self.task_info[task_id].forced_status = "reversed"
		self.task_info[task_id].cancelled_by_actor = true
    end
end

function CRandomTask:update()
	--alun_utils.debug_write("CRandomTask:update() - START")
	for k,v in pairs(self.task_info) do
		v:check_task()
		if (v.timeout and game.get_game_time():diffSec(v.timeout) > v.repeat_timeout) then
			if (axr_main.config:r_value("mm_options","enable_dynamic_news",1)) then
				dynamic_news_manager.get_dynamic_news():GossipTaskRepeatTimeout(k)
			end
			if not (db.actor:get_task(k,true)) then -- don't remove if engine task object still exist
				self.task_info[k] = nil
			end
		end
	end
	--alun_utils.debug_write("CRandomTask:update() - END")
end 

--' Проверяем, не выполнен ли таск
function CRandomTask:task_complete(p1)
	if (db.actor == nil or device().precache_frame > 1) then 
		return false 
	end 
	
	local tsk = self.task_info[p1]
	if tsk == nil then
		printf("ERROR: CRandomTask:task_complete %s task is nil!",p1)
		return true
	end
	
	if (tsk.forced_status == "complete") then
		tsk.forced_status = nil
		tsk.last_check_task = "complete"
	elseif (tsk.forced_status == "fail") then 
		return false
	elseif (tsk.forced_status == "reversed") then 
		return false
	elseif (tsk.forced_status == "cancel") then 
		return false
	end
	
	if tsk.last_check_task == "complete" then
		return true
	end
	return false
end
-- Check if task is not failed
function CRandomTask:task_fail(p1)
	if (db.actor == nil or device().precache_frame > 1) then 
		return false 
	end 
	
	local tsk = self.task_info[p1]
	if tsk == nil then
		printf("ERROR: CRandomTask:task_fail %s task is nil!",p1)
		return false
	end
	
	if (tsk.forced_status == "fail") then
		tsk.forced_status = nil
		tsk.last_check_task = "fail"
	elseif (tsk.forced_status == "reversed") then
		tsk.forced_status = nil
		tsk.last_check_task = "reversed"
	elseif (tsk.forced_status == "cancel") then
		tsk.forced_status = nil
		tsk.last_check_task = "cancel"
	elseif (tsk.forced_status == "complete") then 
		return false
	end
	
	if (tsk.last_check_task == "fail" or tsk.last_check_task == "reversed" or tsk.last_check_task == "cancel") then
		return true
	end
	
	if ((db.actor) and (tsk.forced_status ~= "complete") and (tsk.last_check_task ~= "complete")) then
		local s_time = level.get_start_time()
		local g_time = tonumber(game.get_game_time():diffSec(s_time))
		local q_timeout = tsk.quest_timeout
		if ((q_timeout ~= nil) and (q_timeout ~= 1) and (q_timeout ~= 0)) then
			local r_time = tsk.recieved_time or 1
			if ((tsk.recieved_time + 1000) < g_time) then
				return false
			end
			--local printff = ((r_time+q_timeout) - g_time)
			--printf("Quest will fail due to timeout from:")
			--printf(printff)
			local title = game.translate_string(tsk.title) or "no_title"
			if ((g_time >= (r_time + q_timeout)) and (r_time ~= 1)) then
				tsk.forced_status = "fail"
				db.actor:give_game_news(game.translate_string("st_task_title"), game.translate_string("st_task_time") .. title .. game.translate_string("st_expired"), "ui_iconsTotal_locations", 0, 7000)
			end
			if (not tsk.is_first_update) then
				tsk.is_first_update = true
			elseif ((g_time >= ((r_time + q_timeout)/2)) and (r_time ~= 1) and (tsk.is_timeout_half_sent == false) and (tsk.is_first_update)) then
				db.actor:give_game_news(game.translate_string("st_task_title"), game.translate_string("st_task_time") .. title .. game.translate_string("st_half_expired"), "ui_iconsTotal_locations", 0, 7000)
				tsk.is_timeout_half_sent = true
			elseif ((g_time >= ((r_time + q_timeout)/1.33)) and (r_time ~= 1) and (tsk.is_timeout_soon == false) and (tsk.is_timeout_half_sent == true)) then
				db.actor:give_game_news(game.translate_string("st_task_title"), game.translate_string("st_task_time") .. title .. game.translate_string("st_expire_soon"), "ui_iconsTotal_locations", 0, 7000)
				tsk.is_timeout_soon = true
			end
		end
	end
	
	return false
end

function get_task_manager()
	if random_task == nil then
		random_task = CRandomTask()
	end
	return random_task
end

function task_complete(p1)
	return get_task_manager():task_complete(p1)
end
function task_fail(p1)
	return get_task_manager():task_fail(p1)
end
function task_callback(tsk, state)
	local tm = get_task_manager()
	local id = tsk:get_id()
	
	local rtask = tm.task_info[id]
	if not (rtask) then
		return 
	end 
	
	--mlr
	local giver_npc_id = rtask.task_giver_id
	--mlr	
	
	--printf("task_callback %s state=%s",id,state == task.fail and "fail" or state == task.completed and "complete" or state)
	
	if (rtask.last_check_task == "reversed") then
		if (rtask.on_reversed) then
			xr_logic.pick_section_from_condlist(db.actor, db.actor, rtask.on_reversed)
			printf("Task on_reversed logic")
		end
		
		news_manager.send_task(db.actor, "reversed", tsk)
		rtask.status = "reversed"
		
		if (rtask.repeat_timeout) then
			rtask.cancelled_by_actor = nil
			rtask.forced_status = nil
			rtask.t = nil
			rtask.timeout = game.get_game_time()
			rtask.stage = 255
		else 
			tm.task_info[id] = nil
		end	
	elseif (rtask.last_check_task == "cancel") then
		if (rtask.on_cancel) then
			xr_logic.pick_section_from_condlist(db.actor, db.actor, rtask.on_cancel)
			printf("Task on_cancel logic")
		end
		
		news_manager.send_task(db.actor, "cancel", tsk)
		rtask.status = "cancel"
		
		if (rtask.repeat_timeout) then
			rtask.cancelled_by_actor = nil
			rtask.forced_status = nil
			rtask.t = nil
			rtask.timeout = game.get_game_time()
			rtask.stage = 255
		else 
			tm.task_info[id] = nil
		end		
 	elseif (state == task.fail) then
		news_manager.send_task(db.actor, "fail", tsk)
		
		rtask.status = "fail"
		
		if (rtask.cancelled_by_actor) then
			dxr_statistics.increment_statistic("tasks_cancelled")
			if (rtask.on_cancel) then
				xr_logic.pick_section_from_condlist(db.actor, db.actor, rtask.on_cancel)
			end
			if	giver_npc_id ~= nil then
				area_utils.show_goodwill_change_msg(giver_npc_id)
			end
		else
			dxr_statistics.increment_statistic("tasks_failed")
			if (rtask.on_fail) then
				xr_logic.pick_section_from_condlist(db.actor, db.actor, rtask.on_fail)
			end
			if	giver_npc_id ~= nil then
				area_utils.show_goodwill_change_msg(giver_npc_id)
			end
		end
		
		if (rtask.repeat_timeout) then
			rtask.cancelled_by_actor = nil
			rtask.forced_status = nil
			rtask.t = nil
			rtask.timeout = game.get_game_time()
			rtask.stage = 255
		else
			tm.task_info[id] = nil
		end
	elseif (state == task.completed) then 
		if (is_on_complete) then
			if (rtask.on_complete) then
				xr_logic.pick_section_from_condlist(db.actor, db.actor, rtask.on_complete)
			end
			rtask:give_reward()
		end
		rtask.status = "completed"
		dxr_statistics.increment_statistic("tasks_completed")
		if	giver_npc_id ~= nil then
			area_utils.show_goodwill_change_msg(giver_npc_id)
		end
		
		if (rtask.repeat_timeout) then
			rtask.cancelled_by_actor = nil
			rtask.forced_status = nil
			rtask.t = nil
			rtask.timeout = game.get_game_time()
			rtask.stage = 255
		else 
			tm.task_info[id] = nil
		end
		is_on_complete = true
	end
end

function clear_task_manager()
end

--====================================================
function save_state(m_data)
	--alun_utils.debug_write("task_manager.save_state")
	m_data.task_info = not m_data.task_info and {} or empty_table(m_data.task_info)
	m_data.task_objects = not m_data.task_objects and {} or empty_table(m_data.task_objects)
	
	local tm = get_task_manager()
	
	for k,v in pairs(tm.task_info) do
		m_data.task_info[k] = true
		tm.task_info[k]:save_state(m_data)
	end
end 

function load_state(m_data)
	if not (m_data.task_info) then 
		return 
	end 
	
	local tm = get_task_manager()
	
	for task_id,v in pairs(m_data.task_info) do 
		local obj = task_objects.CGeneralTask(task_id)
		if (obj:load_state(m_data) == true) then
			tm.task_info[task_id] = obj
			--[[
			local t = db.actor and db.actor:get_task(obj.id,true)
			if (t) then
				t:add_complete_func("task_manager.task_complete")
				t:add_fail_func("task_manager.task_fail")
			end
			--]]
		end
	end
	
	m_data.task_info = nil
end