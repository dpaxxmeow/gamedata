local tm = {}
local config_by_name = {}

function on_game_start()
	RegisterScriptCallback("save_state",trade_save)
	RegisterScriptCallback("load_state",trade_load)
end

function trade_init(npc, cfg)
	if not (db.actor) then 
		return 
	end 
	
	-- no use having trade for enemies or zombied (no dialogs)
	if (npc:relation(db.actor) == game_object.enemy or npc:character_community() == "zombied") then 
		return 
	end
	
	local id = npc:id()
	if (tm[id] and tm[id].cfg_ltx == cfg) then
		config_by_name[cfg] = config_by_name[cfg] or ini_file(cfg)
		return 
	end
	
	tm[id] = empty_table(tm[id])
	tm[id].cfg_ltx = cfg
	config_by_name[cfg] = config_by_name[cfg] or ini_file(cfg)
	if not (config_by_name[cfg]) then
		tm[id] = nil
	end
end

function setup_buy_sell_conditions(npc,id,config)

	local condlist = xr_logic.parse_condlist(npc, "trader", "buy_condition", config:r_string_ex("trader", "buy_condition") or "")
	local str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if (str == nil or str == "" or str == "nil") then
		printf("Wrong section in buy_condition condlist for npc [%s]!", npc:name())
		return
	end
	
	npc:buy_condition(config, str)
	tm[id].current_buy_condition = str

	condlist = xr_logic.parse_condlist(npc, "trader", "sell_condition", config:r_string_ex("trader", "sell_condition") or "")
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if(str == nil or str == "" or str == "nil") then
		printf("Wrong section in sell_condition condlist for npc [%s]!", npc:name())
		return
	end

	npc:sell_condition(config, str)
	tm[id].current_sell_condition = str

	npc:buy_item_condition_factor(config:r_float_ex("trader", "buy_item_condition_factor", 0.7))

	--npc:buy_item_radiation_factor(config:r_float_ex("trader", "buy_item_radiation_factor", 0.1))
end 

function update(npc)
	local id = npc and npc:id()
	if not (id) then 
		return 
	end
	
	if not (tm[id] and tm[id].cfg_ltx) then 
		return
	end 
	
	local config = config_by_name[tm[id].cfg_ltx]
	if not (config) then
		return
	end
	
	setup_buy_sell_conditions(npc,id,config)
	
	local TU = area_caravans and area_caravans.trader_update[id]
	if (TU) then
		if (TU == "active") then -- skip updates if caravan in route
			return
		elseif (TU == "fail") then -- reset and skip resupply if caravan dies in route
			area_caravans.trader_update[id] = nil
			return
		elseif (TU == "succeed") then -- resupply if caravan succeeds
			TU = nil
		end
	elseif (tm[id].resupply_time and game.get_game_time():diffSec(tm[id].resupply_time) < 172800) then -- normal
		return
	end
	tm[id].resupply_time = game.get_game_time() -- reset resupply time
	
	local str = config:r_string_ex("trader", "buy_supplies")
	if not (str) then 
		return -- no buy_supplies this is normal
	end

	local condlist = xr_logic.parse_condlist(npc, "trader", "buy_supplies", str)
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if(str=="" or str==nil) then
		printf("Wrong section in buy_supplies condlist for npc [%s]!", npc:name())
		return
	end
	
	local function buy_partial(item, val)
		local max_uses = item:get_max_uses() or 1
		if max_uses > 1 then
			if math.random() < val then
				item:set_remaining_uses(math.random(1,2))
			end
		end
	end
	
	if (tm[id].current_buy_supplies == nil) then 
		npc:buy_supplies(config, str)
		tm[id].current_buy_supplies = str
		npc:iterate_inventory(buy_partial,npc,0.25)
	elseif (tm[id].current_buy_supplies ~= str) then
		npc:buy_supplies(config, str)
		npc:iterate_inventory(buy_partial,npc,0.25)
		tm[id].current_buy_supplies = str
	end
end

function trade_save(m_data)
	m_data.trade_manager = tm
end 

function trade_load(m_data)
	tm = m_data.trade_manager or tm or {}
end

function unregister(id)
	tm[id] = nil
end

----------- NOT TO DELETE!!!!!!!!! called from engine
function get_buy_discount(npc_id)
	--alun_utils.debug_write("get_buy_discount")
	if not (tm[npc_id] and tm[npc_id].cfg_ltx) then
		return 1
	end

	local config = config_by_name[tm[npc_id].cfg_ltx]
	local condlist = config and config:r_string_to_condlist("trader","discounts")
	local sect = condlist and xr_logic.pick_section_from_condlist(db.actor, nil, condlist)
	if (sect == nil or sect == "") then 
		return 1 
	end

	return config:r_float_ex(sect,"buy") or 1
end
----------- NOT TO DELETE!!!!!!!!! called from engine
function get_sell_discount(npc_id)
	--alun_utils.debug_write("get_sell_discount")
	if not (tm[npc_id] and tm[npc_id].cfg_ltx) then
		return 1
	end

	local config = config_by_name[tm[npc_id].cfg_ltx]
	local condlist = config and config:r_string_to_condlist("trader","discounts")
	local sect = condlist and xr_logic.pick_section_from_condlist(db.actor, nil, condlist)
	if (sect == nil or sect == "") then 
		return 1 
	end
	
	return config:r_float_ex(sect,"sell") or 1
end
