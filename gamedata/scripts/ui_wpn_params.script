function normalize(val, min, max)
	local d = 100*(val-min)/(max-min)
	if d < 0 then
		return 0
	end
	return math.clamp(d,0,100)
end

function normalizeMP(val)
	if val > 100 then
		val = 100
	elseif val < 1 then
		val  = 1
	end
	
	return val
end

function read_if_exist(section, value, default)
    if INI:section_exist(section) and INI:line_exist(section,value) then
		return INI:r_float_ex(section,value)
	else
		return default
	end
end

function read_float(wpn_section, upgr_sections, param)
	local res = 0
	
	local class = INI:r_string_ex(wpn_section,"class")
	if (class == "WP_RG6") then 
		local ammo_section = INI:r_list_ex(wpn_section, "ammo_class", {})[1] or ""
		local fake_grenade_name = INI:r_string_ex(ammo_section,"fake_grenade_name")
		return fake_grenade_name and INI:r_float_ex(fake_grenade_name,"blast") or 0
	elseif (class == "WP_RPG7") then 
		local rocket_section = INI:r_string_ex(wpn_section,"rocket_class")
		return rocket_section and INI:r_float_ex(rocket_section,"blast") or 0
	end
	
	if (param == "hit_power") then
		local t = INI:r_list_ex(wpn_section,"hit_power","")
		local gd = level.get_game_difficulty()+1
		res = tonumber(t[gd] or t[1]) or 0
	else
		res = INI:r_float_ex(wpn_section, param) or param == "control_inertion_factor" and 1 or 0
	end 
	
	if (upgr_sections and upgr_sections ~= "") then
		local upgrades = parse_names(upgr_sections)
		for i, sect in ipairs(upgrades) do
			if param == "hit_power" then
				local t = INI:r_list_ex(sect,param,"")
				local gd = level.get_game_difficulty()+1
				res = res + (tonumber(t[gd] or t[1]) or 0)
			else
				res = res + (INI:r_float_ex(sect,param) or 0)
			end		
		end 
	end
	
    return res
end

local max_hit_power_value,max_rpm_value, max_fire_dispersion_base_value, max_control_inertion_factor_value, max_PDM_disp_accel_factor_value, max_crosshair_inertion_value

function GetRPM(wpn_section, upgr_sections)
	if not (max_hit_power_value) then 
		calculate_max_hit_power_value()
	end
	
	local rpm = read_float(wpn_section, upgr_sections, "rpm")
	return normalize(rpm, 0, max_rpm_value)
end

function GetDamage(wpn_section, upgr_sections)
	if not (max_hit_power_value) then 
		calculate_max_hit_power_value()
	end
	
	local hit_power = read_float(wpn_section, upgr_sections, "hit_power")
	return normalize(hit_power, 0, max_hit_power_value)
end

function GetDamageMP(wpn_section, upgr_sections)
	local hit_power = read_float(wpn_section, upgr_sections, "hit_power")
	hit_power = hit_power * 100	
	return normalizeMP(hit_power)
end

function GetHandling(wpn_section, upgr_sections)
	if not (max_hit_power_value) then
		calculate_max_hit_power_value()
	end
	
	local PDM_disp_accel_factor = read_float(wpn_section,upgr_sections, "PDM_disp_accel_factor")
	local control_inertion_factor = read_float(wpn_section, upgr_sections, "control_inertion_factor")
	local crosshair_inertion = read_float(wpn_section,upgr_sections, "crosshair_inertion")
	return (normalize(PDM_disp_accel_factor, max_PDM_disp_accel_factor_value, 0) + normalize(control_inertion_factor, max_control_inertion_factor_value, 1) + normalize(crosshair_inertion, max_crosshair_inertion_value, 0))/3
end

function GetAccuracy(wpn_section, upgr_sections)
	if not (max_hit_power_value) then 
		calculate_max_hit_power_value()
	end
    local accuracy	= read_float(wpn_section, upgr_sections, "fire_dispersion_base")
	return normalize(accuracy, 1, 0)
end

function calculate_max_hit_power_value()
	
	max_hit_power_value = 0
	max_rpm_value = 0
	max_fire_dispersion_base_value = 0
	max_PDM_disp_accel_factor_value = 0
	max_control_inertion_factor_value = 0
	max_crosshair_inertion_value = 0
	
	local sections_by_hit_power_value = DEV_DEBUG_DEV and {} or nil
	INI:section_for_each(function(section)
		if (INI:line_exist(section,"hit_power") and INI:line_exist(section,"ammo_class") and INI:line_exist(section,"hud")) then
			local class = INI:r_string_ex(section,"class")
			if (class ~= "WP_RPG7" and class ~= "WP_RG6" and class ~= "W_MOUNTD" and class ~= "W_STMGUN" and class ~= "WP_BINOC" and class ~= "WP_KNIFE") then
				local t = parse_names(INI:r_string_ex(section,"hit_power") or "")

				local hit_power = GetMaxPotential(section,"hit_power")
				if (hit_power > max_hit_power_value) then 
					max_hit_power_value = hit_power
				end
				
				local rpm = GetMaxPotential(section,"rpm")
				if (rpm > max_rpm_value) then 
					max_rpm_value = rpm
				end
	
				local fire_dispersion_base = GetMaxPotential(section,"fire_dispersion_base")
				if (fire_dispersion_base > max_fire_dispersion_base_value) then 
					max_fire_dispersion_base_value = fire_dispersion_base
				end

				local PDM_disp_accel_factor = GetMaxPotential(section,"PDM_disp_accel_factor")
				if (PDM_disp_accel_factor > max_PDM_disp_accel_factor_value) then 
					max_PDM_disp_accel_factor_value = PDM_disp_accel_factor
				end

				local control_inertion_factor = GetMaxPotential(section,"control_inertion_factor")
				if (control_inertion_factor > max_control_inertion_factor_value) then 
					max_control_inertion_factor_value = control_inertion_factor
				end
				
				local crosshair_inertion = GetMaxPotential(section,"crosshair_inertion")
				if (crosshair_inertion > max_crosshair_inertion_value) then 
					max_crosshair_inertion_value = crosshair_inertion
				end
				
				if (DEV_DEBUG_DEV) then
					sections_by_hit_power_value[section] = hit_power
				end
			end
		end
		return false
	end)
	
	-- List of all weapons and their calculated hit_power values
	-- if (DEV_DEBUG_DEV) then
		-- local cfg,err = io.open("weapons_hit_power.ltx","w+")
		-- if not (err) then
			-- local function addTab(s,n)
				-- local padding = {}
				-- local l = string.len(s)
				-- for i=1,n-l do 
					-- padding[#padding+1] = " "
				-- end 
				-- return s .. table.concat(padding)
			-- end
	
			-- for k,v in spairs(sections_by_hit_power_value, function(t,a,b) return t[a] < t[b] end) do 
				-- cfg:write(addTab(k,40).." = " .. v .. " | " .. string.format("%.2f",normalize(v,0,max_hit_power_value)) .. "% of max\n")
			-- end
			-- cfg:close()
			-- printf("successfully created weapons_hit_power.ltx")
		-- end
	-- end
end

local upgrade_sect_cache = {}
function get_all_upgrade_sections(wpn_section)
	if (upgrade_sect_cache[wpn_section]) then 
		return upgrade_sect_cache[wpn_section]
	end 
	
	local stack = INI:r_list_ex(wpn_section,"upgrades")
	if not (stack) then
		upgrade_sect_cache[wpn_section] = ""
		return ""
	end 
	
	local node
	local t = {}
	while true do
		if (node) then
			local elements = INI:r_list_ex(node,"elements")
			if (elements) then 
				for i,element in ipairs(elements) do 
					local upgr_sect = INI:r_string_ex(element,"section","")
					if (upgr_sect ~= "") then 
						table.insert(t,upgr_sect)
					end
					local next_sect = INI:r_string_ex(element,"effects","")
					if (next_sect ~= "") then 
						table.insert(stack,next_sect)
					end
				end
			end
		end
		if (#stack > 0) then
			node = stack[#stack]
			stack[#stack] = nil
		else
			break
		end
	end
	
	local str = table.concat(t,",")
	upgrade_sect_cache[wpn_section] = str
	return str
end 

function GetMaxPotential(wpn_section,prop)
	local upgr_sections = get_all_upgrade_sections(wpn_section)
	local total = read_float(wpn_section, upgr_sections, prop)
	return total
end

function GetBulletSpeed(wpn_section, upgr_sections) -- настильность
	local bullet_speed = read_float(wpn_section, upgr_sections, "bullet_speed")
	return normalize(bullet_speed, 100, 1000)
end

function read_string(wpn_section, upgr_sections, param, default_param)
	local res = default_param
	if INI:line_exist(wpn_section, param) then
		res = INI:r_string(wpn_section, param)
	end
	if upgr_sections== nil or upgr_sections=="" then
		return res
	end
	for k, sect in pairs(parse_names(upgr_sections)) do
		if INI:line_exist(sect, param) then
			res = INI:r_string(sect, param)
		end
	end
	return res
end

function limit(value, min, max)
	if value<min then
		value = min
	elseif value>max then
		value = max
	end
	return value
end

function GetRecoil(wpn_section, upgr_sections) -- отдача
	local fire_modes				= read_string(wpn_section, upgr_sections, "fire_modes", "1")
	fire_modes						= parse_nums(fire_modes)
	local auto_mode					= false
	local custom_mode				= false
	for k, v in pairs(fire_modes) do
		if v==-1 then
			auto_mode				= true
		end
		if v>1 then
			custom_mode				= true
		end
	end
	local cam_dispersion			= read_float(wpn_section, upgr_sections, "cam_dispersion")
	local cam_dispersion_inc		= read_float(wpn_section, upgr_sections, "cam_dispersion_inc")
	local cam_step_angle_horz		= read_float(wpn_section, upgr_sections, "cam_step_angle_horz")
	local cam_max_angle_horz		= read_float(wpn_section, upgr_sections, "cam_max_angle_horz")
	local zoom_cam_dispersion		= read_float(wpn_section, upgr_sections, "zoom_cam_dispersion")			--"cam_dispersion"
	local zoom_cam_dispersion_inc	= read_float(wpn_section, upgr_sections, "zoom_cam_dispersion_inc")		--"cam_dispersion_inc"
	local zoom_cam_step_angle_horz	= read_float(wpn_section, upgr_sections, "zoom_cam_step_angle_horz")	--"cam_step_angle_horz"
	local zoom_cam_max_angle_horz	= read_float(wpn_section, upgr_sections, "zoom_cam_max_angle_horz") 	--"cam_max_angle_horz"
	
	-- Для автоматического оружия (auto_mode) важна отдача при стрельбе очередями
	-- Для оружия с режимами стрельбы с отсечкой по 2, по 3 патрона (custom_mode) важность отдачи равностепенна
	-- Для оружия только с одиночным режимом стрельбы наиболее важна отдача при первом выстреле
	if auto_mode then
		cam_dispersion					= normalize(cam_dispersion,				0.0, 3.0) * 1.00
		cam_dispersion_inc				= normalize(cam_dispersion_inc,			0.0, 1.5) * 2.00
		cam_step_angle_horz				= normalize(cam_step_angle_horz,		0.0, 1.8) * 0.75
		cam_max_angle_horz				= normalize(cam_max_angle_horz,			0.0, 9.0) * 0.25
		zoom_cam_dispersion				= normalize(zoom_cam_dispersion,		0.0, 2.0) * 1.00
		zoom_cam_dispersion_inc			= normalize(zoom_cam_dispersion_inc,	0.0, 1.0) * 2.00
		zoom_cam_step_angle_horz		= normalize(zoom_cam_step_angle_horz,	0.0, 1.2) * 0.75
		zoom_cam_max_angle_horz			= normalize(zoom_cam_max_angle_horz,	0.0, 6.0) * 0.25
	elseif custom_mode then
		cam_dispersion					= normalize(cam_dispersion,				0.0, 3.0) * 1.50
		cam_dispersion_inc				= normalize(cam_dispersion_inc,			0.0, 1.5) * 1.50
		cam_step_angle_horz				= normalize(cam_step_angle_horz,		0.0, 1.8) * 0.75
		cam_max_angle_horz				= normalize(cam_max_angle_horz,			0.0, 9.0) * 0.25
		zoom_cam_dispersion				= normalize(zoom_cam_dispersion,		0.0, 2.0) * 1.50
		zoom_cam_dispersion_inc			= normalize(zoom_cam_dispersion_inc,	0.0, 1.0) * 1.50
		zoom_cam_step_angle_horz		= normalize(zoom_cam_step_angle_horz,	0.0, 1.2) * 0.75
		zoom_cam_max_angle_horz			= normalize(zoom_cam_max_angle_horz,	0.0, 6.0) * 0.25
	else
		cam_dispersion					= normalize(cam_dispersion,				0.0, 3.0) * 2.00
		cam_dispersion_inc				= normalize(cam_dispersion_inc,			0.0, 1.5) * 1.00
		cam_step_angle_horz				= normalize(cam_step_angle_horz,		0.0, 1.8) * 0.75
		cam_max_angle_horz				= normalize(cam_max_angle_horz,			0.0, 9.0) * 0.25
		zoom_cam_dispersion				= normalize(zoom_cam_dispersion,		0.0, 2.0) * 2.00
		zoom_cam_dispersion_inc			= normalize(zoom_cam_dispersion_inc,	0.0, 1.0) * 1.00
		zoom_cam_step_angle_horz		= normalize(zoom_cam_step_angle_horz,	0.0, 1.2) * 0.75
		zoom_cam_max_angle_horz			= normalize(zoom_cam_max_angle_horz,	0.0, 6.0) * 0.25
	end
	
	cam_dispersion					= limit(cam_dispersion, 0, 100)
	cam_dispersion_inc				= limit(cam_dispersion_inc, 0, 100)
	cam_step_angle_horz				= limit(cam_step_angle_horz, 0, 100)
	cam_max_angle_horz				= limit(cam_max_angle_horz, 0, 100)
	zoom_cam_dispersion				= limit(zoom_cam_dispersion, 0, 100)
	zoom_cam_dispersion_inc			= limit(zoom_cam_dispersion_inc, 0, 100)
	zoom_cam_step_angle_horz		= limit(zoom_cam_step_angle_horz, 0, 100)
	zoom_cam_max_angle_horz			= limit(zoom_cam_max_angle_horz, 0, 100)
	
	local general_value = cam_dispersion + cam_dispersion_inc + cam_step_angle_horz + cam_max_angle_horz + zoom_cam_dispersion + zoom_cam_dispersion_inc + zoom_cam_step_angle_horz + zoom_cam_max_angle_horz
	
	return normalize(general_value, 0, 800)
end