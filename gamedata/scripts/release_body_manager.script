-- Alundaio
---------------------------------------------------------------------------------------------
-- About: Only non-story objects with no items in the death_generic keep items list can be considered for removal.
-- This table is also used by xr_corpse_detection.script
-- Reworked by A.R.E.A. Team
local RB_manager = nil
function get_release_body_manager()
	if(RB_manager==nil) then
		RB_manager = Crelease_body()
	end
	RB_manager:UpdateSettings()
	return RB_manager
end

local function has_known_info(obj)
	local spawn_ini = obj.spawn_ini and obj:spawn_ini()
	local filename = spawn_ini and spawn_ini:r_string_ex("logic","cfg")

	local st = db.storage[obj:id()]
	local char_ini = filename and ini_file(filename) or st.ini

	local known_info = st.section_logic and char_ini:r_string_ex(st.section_logic,"known_info") or "known_info"
	if (char_ini and char_ini:section_exist(known_info)) then
		return true
	end

	if (spawn_ini and spawn_ini:section_exist(known_info)) then
		return true
	end

	return false
end

--local function on_before_level_changing()
--	get_release_body_manager():clear(true,1)
--	printdbg("~ release_body_manager | cleaned all dead bodies")
--end

--function on_game_start()
--	RegisterScriptCallback("on_game_load",update_settings)
--	--RegisterScriptCallback("on_before_level_changing",on_before_level_changing)
--end

class "Crelease_body"
function Crelease_body:__init()
	self.MIN_RELEASE_DISTANCE = 10000		-- dist*dist away from actor required before releasing
	self.BODY_MAX_COUNT = 10				-- The max amount of corpses that can exist before checking for releasable corpses.
	self.STAY_TIME = 48						-- time corpse exists before removal if body max count and distance is met
    self.release_objects_table = {}
	self.keep_items_table = ini_file("misc\\death_generic.ltx"):parameters_table("keep_items")
	local function up()
		if #self.release_objects_table > self.BODY_MAX_COUNT then
			self:clear(nil, self.MIN_RELEASE_DISTANCE)
		end
	end

	AddUniqueCall(function()
		LimitUpdate(up, 30)
	end)
end

function Crelease_body:UpdateSettings()
	local dist = axr_main.config:r_value("mm_options","alife_body_rel_min_dist",2,100)
    self.MIN_RELEASE_DISTANCE = dist * dist
	self.BODY_MAX_COUNT = axr_main.config:r_value("mm_options","alife_body_count_max",2,10)
    self.STAY_TIME = axr_main.config:r_value("mm_options","alife_body_stay_time",2,48)
	-- printf("release_body_manager:get_release_body_manager:CNT:%s STAY:%s DIS:%s",self.BODY_MAX_COUNT,self.STAY_TIME,self.MIN_RELEASE_DISTANCE)
end

function Crelease_body:can_release(obj)
	--alun_utils.debug_write("Crelease_body:can_release")
	-- Monsters aren't special ever, so put them in
	if (IsMonster(obj)) then
		return true
	end

	-- Never put story related NPCs in this list
	if (has_known_info(obj) or get_object_story_id(obj:id())) then
		return false
	end

	-- Avoid putting corpses with quest items in list
	for k,_ in pairs(self.keep_items_table) do
		if (obj:object(k)) then
			return false
		end
	end

	return true
end

function Crelease_body:IsReleaseObjects(id)
	for _,ids in ipairs(self.release_objects_table) do
		if ids == id then
			return true
		end
	end
	return false
end

function Crelease_body:add_corpse(obj)
	--alun_utils.debug_write("Crelease_body:add_corpse")
	-- printf("Crelease_body:add_corpse:name:%s", obj and obj:name())
	local id = obj and obj:id()
	if not (id) then
		--abort("Crelease_body: CRITICAL ERROR obj and id should never be nil!")
		return false
	end

	if not self:can_release(obj) then
		return false
	end

	if not self:IsReleaseObjects(id) then
		table.insert(self.release_objects_table, id)
		-- printf("-Crelease_body:add_corpse: create to release_objects_table name:%s table index %s", obj and obj:name(), #self.release_objects_table)
		return true
	end

	return false
end

function Crelease_body:moving_dead_body(obj, net_spawn)
	--alun_utils.debug_write("moving_dead_body %s",obj and obj:name())
	--printf("Crelease_body:moving_dead_body:name:%s", obj and obj:name())
	if (not net_spawn) and #self.release_objects_table > self.BODY_MAX_COUNT then
		self:clear()
	end

	--printf("~Crelease_body:moving_dead_body release_objects_table name:%s time %s", obj and obj:name(), game.get_game_time():diffSec(db.storage[obj:id()].death_time))
	self:add_corpse(obj)
end

function Crelease_body:clear(all, dist)
	--alun_utils.debug_write(strformat("Crelease_body:clear all=%s dist=%s",all,dist))
	if not (db.actor) then
		return
	end

	local sim = alife()
	if not (sim) then
		return
	end

	dist = dist or self.MIN_RELEASE_DISTANCE

	local function iterationFor(_i, id)
		if (all == nil) and (#self.release_objects_table < self.BODY_MAX_COUNT) then
			return
		end
		local se_obj = id and id ~= 65535 and sim:object(id)
		if IsStalker(se_obj) or IsMonster(se_obj) then
			if (all) then
				safe_release_manager.release(se_obj)
				table.remove(self.release_objects_table, _i)
				printf("~Crelease_body:clear: clear release_objects_table name:%s table index %s", se_obj:name(), _i)
			elseif db.actor:position():distance_to_sqr(se_obj.position) >= dist then
				local st = db.storage[id]
				if st and (not st.death_time) then
					error("failed to destroy %s absent death_time!", se_obj:name())
					safe_release_manager.release(se_obj)
					table.remove(self.release_objects_table, _i)
					printf("~Crelease_body:clear: clear release_objects_table name:%s table index %s", se_obj:name(), _i)
				elseif st and game.get_game_time():diffSec(st.death_time) > (self.STAY_TIME*3600) then
					safe_release_manager.release(se_obj)
					table.remove(self.release_objects_table, _i)
					printf("-Crelease_body:clear: limit time and limit distance clear release_objects_table name:%s table index %s", se_obj:name(), _i)
				end
			end
		else
			table.remove(self.release_objects_table, _i)
		end
	end
	forEach(iterationFor, false, 3, ipairs(self.release_objects_table))
end