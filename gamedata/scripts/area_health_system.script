-- A.R.E.A. Actor enhanced health system
-- Made by Holodilnik and Surs
-- Reworked by Nuor

local show_log = false
OverWeight = 0
-- local trait_applied
-- Effectors
-- local vulnerable_bone = {}
-- local PartVulnerability = 0.05 -- extra damage for vulnerable body parts
local ACTOR
local bones_list = {arms = {21,22,23,24,25,26,27,28,29,30,31,32,		--left arm
							33,34,35,36,37,38,39,40,41,42,43,44,45},	--right arm
					legs = {3,4,5,6,									--left leg
							7,8,9,10},									--right leg
					body = {0,1,2, 12,13, 20},							--body,torso
					head = {14,15,16,17,18,19}							--head
}

local agile = {walk = 0, run = 0, sprint = 0}
local feeble = {walk = 0, run = 0, sprint = 0}

cond_info_table = {}

local hstats = {}
local hfstats = {}
--Entity condition

local max_weight = INI:r_float_ex("inventory", "max_weight", 20.0)
local default_run_coeff = INI:r_float_ex("actor", "run_coef", 2.0)
local default_walk_coeff = INI:r_float_ex("actor", "walk_accel", 18)
local default_sprint_coeff = INI:r_float_ex("actor", "sprint_koef", 4.4)
local fracture_run_coeff = INI:r_float_ex("actor", "fracture_run_koef", 1.0)
local fracture_sprint_coeff = INI:r_float_ex("actor", "fracture_sprint_koef", 1.0)
--local temp_restore_coeff = INI:r_float_ex("actor", "temperature_coef", 0.1)
local recovery_coeff = INI:r_float_ex("actor", "movement_recovery_coef", 0.5) -- movement recovery rate after leg damage
--local start_drop = 50
local tox_influence = 0.025

local default_pain_restore = 0.90
local default_max_toxicity = 1.0

local d_sprint_coeff, d_run_coeff, d_runback_coeff, d_jump_speed
local runback_coef, jump_speed
--Misc
local actor_pulse

function activate_feature()
	d_sprint_coeff, d_run_coeff, d_runback_coeff, d_jump_speed = -0.01, -0.01, -0.01, -0.01 -- weight effect on movement
	runback_coef, jump_speed = INI:r_float_ex("actor","run_back_coef"), INI:r_float_ex("actor","jump_speed") -- default coef
	RegisterScriptCallback("actor_on_item_drop",check_weight)
	RegisterScriptCallback("actor_on_item_take",check_weight)
	RegisterScriptCallback("actor_item_to_slot",on_move)
	RegisterScriptCallback("actor_item_to_ruck",on_move)
	RegisterScriptCallback("on_key_press",on_key_press)
	check_weight()
end
--[[
function deactivate_feature()
	UnregisterScriptCallback("actor_on_item_drop",check_weight)
	UnregisterScriptCallback("actor_on_item_take",check_weight)
	UnregisterScriptCallback("actor_item_to_slot",on_move)
	UnregisterScriptCallback("actor_item_to_ruck",on_move)
	runback_coef, jump_speed = nil,nil
	d_sprint_koeff, d_run_coeff, d_runback_coeff, d_jump_speed = nil,nil,nil,nil
	actor_pulse = nil
 end

local function opt_menu_on_init(menu)
	-- weight speed
	menu.gameplay_options["weight_speed"] = {default=false, debug_only=false, typ="check",
		on_accept=function(handler,optMgr,ctrl)
			if (ctrl:GetCheck()) then
				activate_feature()
			else
				deactivate_feature()
			end
		end
	}
end
--]]
function on_game_start()
	--RegisterScriptCallback("opt_menu_on_init",opt_menu_on_init)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	ACTOR = level.Actor()
	hstats = {1,1,1,1,1,1,0,INI:r_float_ex("actor", "temperature_normal", 0.5),0,1,ACTOR:conditions():GetHealth()}
	hfstats = {0,0,0,0,0,0}
	RegisterScriptCallback("actor_on_update", actor_on_update)
	RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
	RegisterScriptCallback("actor_on_item_use", check_weight) --actor_on_item_use)
	--if (axr_main.config:r_value("mm_options","enable_weight_speed",1,false) == true) then
		activate_feature()
	--end
	
	db.actor.hud_icon_Health = hud_icon_Health(get_hud())
    RegisterScriptCallback("actor_on_net_destroy",function()
        db.actor.hud_icon_Health:__finalize()
    end)
	if db.actor:has_info("adrenaline_icon") then
		db.actor.hud_icon_Health:show()
	end

	check_traits()
	apply_traits()
end

function on_move(obj)
	if IsOutfit(obj) or IsBackpack(obj) then
		check_weight()
	end
end

function actor_on_before_hit(shit, bone_id, flags)
	if shit.type == hit.telepatic then
		local psy_resist_coeff = utils.load_var(db.actor, "psy_resist_coeff", 0)
		if psy_resist_coeff > 0 then
			shit.power = shit.power*psy_resist_coeff
		end

		local resistance_psy_num = 0

		db.actor:iterate_inventory(function(actor, item)
			if IsSlotted(item) and (IsOutfit(item) or IsHeadgear(item)) then
				resistance_psy_num = resistance_psy_num + INI:r_float_ex(item:section(), "telepatic_protection", 0)
				item:iterate_installed_upgrades(function(upgrade, decline)
					local upgrade_section = INI:r_string_ex(upgrade, "section")
					if upgrade_section then
						resistance_psy_num = resistance_psy_num + INI:r_float_ex(upgrade_section, "telepatic_protection", 0)
					end
				end, item)
				resistance_psy_num = resistance_psy_num*item:condition()
			end
		end, db.actor)

		if resistance_psy_num > 0 then		
			shit.power = shit.power-(shit.power*(resistance_psy_num*3))
		end
		
		if shit.power < 0 then
			shit.power = 0.001
		end
	end
end

function actor_status_log()
	if not (db.actor) then return end
	--[[
	local weight = db.actor:get_total_weight()
	local r_weight = math.clamp(weight - (suit and suit:get_additional_max_weight() or 0) - (backpack and backpack:get_additional_max_weight() or 0) - (artefact_degradation.art_weight_add or 0),0,weight)
	SetHudMsg (string.format("Total Weight:[%5.2f], Weight [%5.2f], Speed [%5.2f]",weight, r_weight, db.actor:get_move_magnitude()/3),1)
	if (level.name() == "fake_start") then return end
	--]]
	local cactor = db.actor:cast_Actor()
	printf("[Head  ]:%s, [Body  ]:%s",hstats[1],hstats[2])
	printf("[L Hand]:%s, [R Hand]:%s",hstats[3],hstats[4])
	printf("[L Leg ]:%s, [R Leg ]:%s",hstats[5],hstats[6])
	printf("[Health]:%s(%s), [Psy   ]:%s",cactor:conditions():GetHealth(),hstats[11],hstats[10])
	printf("[Toxic ]:%s, [Rad   ]:%s",hstats[7],cactor:conditions():GetRadiation())
	printf("[Pain  ]:%s, [Temp  ]:%s",hstats[9],hstats[8])
	for i = 0, 6 do
		if (cactor:conditions():ActorBleedingSpeed(i) > 0) then
			printf("[Bleed %s]:%s",i, cactor:conditions():ActorBleedingSpeed(i))
		end
		if (cactor:conditions():GetFracture(i) > 0) then
			printf("[Fract %s]:%s",i ,cactor:conditions():GetFracture(i))
		end
	end
	printf("[Stamin]:%s, [Thirst]:%s, [Hunger]:%s [Sleep]:%s",cactor:conditions():GetPower(),cactor:conditions():GetThirst(),cactor:conditions():GetSatiety(), sleep_dep.ExportSleep())
	printf("[Sprint]:%s, [Run]:%s, [Walk]:%s",db.actor:get_actor_sprint_koef(),db.actor:get_actor_run_coef(),cactor:GetWalkAccel())
	printf("--------------------------------------------")
end
--[[
//////////////////////////////////////////////-- Functions to Alter Time Rate for actor --////////////////////////////////////////////////////
// PlaySlowMotion(<time alteration multipier>, <pause duration at max. deceleration>, <start delay>, <deceleration rate>, <recovery rate>)	// 
// SlowMotionActive() returns integer		-- returns duration in microseconds of remaining altered time									//
// Examples:																																//
// on	--> PlaySlowMotion(0.1 ,1000, 0, 0.5, 2.0)	Use 0.5 sec. to reduce time rate to 10%, pause 1 sec, use 2 sec to restore normal rate	//
// Off	--> PlaySlowMotion() or PlaySlowMotion(1)	manually force normal time rate															//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--]]
local adr_restore, adr_pause = 0, 0
local slo_base, adr_rush = 0.70, 0
local adr_dur = 30 -- sec
local adr_trigger = 0.35
local adr_pulse, pulse_pause = 40, actor_pulse
function on_key_press(key)
	if not has_alife_info("adrenaline_rush") then return end -- perk only
	if db.actor:has_info("adrenaline_icon") and dik_to_bind(key) == key_bindings.kUSE then
		local tg = time_global()
		local active = adr_restore - tg
		if active > 0 then						-- slow activated
			ACTOR:PlaySlowMotion(slo_base - adr_rush, active, 0, 0.25, 0.25)
		--	printf("Health::adrenaline_rush: slowmo triggered:%s", ACTOR:SlowMotionActive())
			adr_pause = adr_restore
			adr_restore = tg
			pulse_pause = actor_pulse
			actor_pulse = true
		elseif ACTOR:SlowMotionActive() > 0 then --slow active
			ACTOR:PlaySlowMotion(slo_base - adr_rush, 0, 0, 0.25, 0.25)
			adr_restore = adr_pause
			adr_pause = nil
			actor_pulse = pulse_pause
		end
	end
end

local Boost
local function health_update(tg, cactor)
	if show_log then actor_status_log()	end

	if has_alife_info("adrenaline_rush") then -- time alteration for perk only usage - choice 1
	--printf("Health::adrenaline_rush: slowmo triggered:%s restoretime:%s(%s) UPD:%s UPD1:%s", ACTOR:SlowMotionActive(),adr_restore, tg, UPD,UPD1)
		local health = cactor:GetHealth()
		if hstats[11] - health > adr_trigger then
			adr_restore = tg + adr_dur*1000  -- set/reset duration
			--SetHudMsg(strformat("Adrenaline Active", adr_dur))
			give_info("adrenaline_icon")
			db.actor.hud_icon_Health:show()
		end
		if db.actor:has_info("adrenaline_icon") and ((adr_pause and adr_pause < tg) or (adr_pause == nil and adr_restore < tg)) then
			adr_pause = nil
			disable_info("adrenaline_icon")
			db.actor.hud_icon_Health:__finalize()
		end
		hstats[11] = health
	--end
	--if has_alife_info("adrenaline_rush") then -- general usage of adrenaline time alteration - choice 2
		if cactor:PulseRate() > 110 then
			if Boost == nil then
				Boost = true
				default_run_coeff = INI:r_float_ex("actor", "run_coef", 2.0) + feeble.run + agile.run + 0.2
				default_sprint_coeff = INI:r_float_ex("actor", "sprint_koef", 4.4) + feeble.sprint + agile.sprint + 0.2
			end
		elseif Boost == true then
			Boost = nil
			default_run_coeff = INI:r_float_ex("actor", "run_coef", 2.0) + feeble.run + agile.run - 0.2
			default_sprint_coeff = INI:r_float_ex("actor", "sprint_koef", 4.4) + feeble.sprint + agile.sprint - 0.2
		end
		
	end
	
	local max_power_coeff = 1 + cactor:GetMaxPowerBonus()
	--Fracture
	local total_fracture = cactor:GetFracture()
		
	--Blood
	if show_log then printf("Health:: Bleed:%s", cactor:ActorBleedingSpeed()) end
	local UPD = 0
	local part_frac = 0
	for i=1, 6 do
		local part_health = cactor:GetHealth(i)
		local bone_delta = part_health - hstats[i]
		if (i == 1) then
			if (part_health <= 0.1) then
				db.actor:kill(db.actor,true)
			end
		elseif (i == 2) then
			if (part_health <= 0.01) then
				db.actor:kill(db.actor,true)
			end
		-- elseif (i == 3 or i == 4) then
		-- 	if math.ceil((1-part_health)*100) > math.random(start_drop,1000) then
		-- 		local item = db.actor:active_item()
		-- 		local section = item and item:section()
		-- 		if section and INI:r_float_ex(section, "single_handed", 1) == 0 then
		-- 			if item then 
		-- 				db.actor:drop_item(item)
		-- 			end
		-- 		end
		-- 	end
		elseif (i == 5 or i == 6) then 
			part_frac = part_frac + cactor:GetFracture(i)/2
			if bone_delta ~= 0 then
				UPD = UPD + 1 -- prevent speed reset
			-- cactor:SetMaxPower(math.clamp(cactor:GetMaxPower()+bone_delta, 0.4, max_power_coeff))
				ACTOR:ChangeWalkAccel(math.clamp(ACTOR:GetWalkAccel() + default_walk_coeff * bone_delta * recovery_coeff, 1, default_walk_coeff))
				db.actor:set_actor_run_coef(math.clamp(db.actor:get_actor_run_coef() + default_run_coeff * bone_delta * recovery_coeff, 0, default_run_coeff))
				db.actor:set_actor_sprint_koef(math.clamp(db.actor:get_actor_sprint_koef() + default_sprint_coeff * bone_delta * recovery_coeff, 0, default_sprint_coeff))
			end
		end
		hstats[i] = part_health
	end

	if UPD == 0 then -- reset speed values
		if ACTOR:GetWalkAccel() ~= default_walk_coeff then ACTOR:ChangeWalkAccel(default_walk_coeff) end
		if db.actor:get_actor_run_coef() ~= default_run_coeff then db.actor:set_actor_run_coef(default_run_coeff) end
		if db.actor:get_actor_sprint_koef() ~= default_sprint_coeff then db.actor:set_actor_sprint_koef(default_sprint_coeff) end
	end
	
	-- if part_frac > 0 then
		-- db.actor:set_actor_run_coef(math.clamp(db.actor:get_actor_run_coef() * part_frac * fracture_run_coeff, 0, 1))
		-- db.actor:set_actor_sprint_koef(math.clamp(db.actor:get_actor_sprint_koef() * part_frac * fracture_sprint_coeff, 0, 1))
	-- end
	--Toxicity
	local toxic = cactor:GetToxicity()
	if (toxic >= cactor:GetToxicityMax()) then
		db.actor:kill(db.actor,true)
	end
	hstats[7] = toxic
	if (hstats[7] ~= toxic) then
		--cactor:ChangeAlcohol(math.clamp(toxic*(1-tox_influence), 0, 1)) -- does nothing
		cactor:SetMaxPower(math.clamp(cactor:GetMaxPower()-toxic*tox_influence, 0, max_power_coeff))
		if (sleep_dep.last_sleep and toxic == 0.9) then
			sleep_dep.last_sleep = sleep_dep.last_sleep + 1
		end
	end
	if show_log then printf("Health:: toxic:%s",toxic) end

	--Temperature
	temp = cactor:GetTemperature()
	if ((temp <= cactor:GetTemperatureMin()) or (temp >= cactor:GetTemperatureMax())) then
		db.actor:kill(db.actor,true)
	end
	hstats[8] = temp
	if show_log then printf("Health:: temperature:%s",temp) end
	
	--Pain
	local move_pain_coef = 0.0001
	local pain = cactor:GetPain()
	if total_fracture > 0.1 then
		pain = cactor:SetPain(pain + db.actor:get_move_magnitude() * move_pain_coef * total_fracture)
	end
	hstats[9] = pain
	
	local psyh = cactor:GetPsyHealth()
	if (psyh > (1-pain)) and (psyh > 0.3) then
		cactor:ChangePsyHealth(math.clamp(psyh*(1-pain), 0.3, 1))
	end
	if pain == cactor:GetPainMax() and not ui_sleep_dialog.IsSleeping() then
		sleep_dep.force_sleep()
	end
	if show_log then printf("Health:: pain:%s",pain) end
	
	--Psy Health
	local psy = cactor:GetPsyHealth()
	hstats[10] = psy

	if show_log then printf("Health:: pysH:%s",psy) end

	if actor_pulse then pulse() end
	
	-- stamina penalty from leg health
	local bone_head = (cactor:GetHealth(5) + cactor:GetHealth(6))/2
	cactor:SetMaxPower(math.clamp(max_power_coeff*bone_head, 0.4, max_power_coeff))
end

function actor_on_update(dummy, delta)
	if not db.actor then return end
-- test
--	if device():is_paused() then
--		if adr_pause then adr_pause = adr_pause + delta end
--		adr_restore = adr_restore + delta
--		return
--	end
--test
	local cactor = ACTOR:conditions()
	--Psy Health
	local psy = cactor:GetPsyHealth()
	if (psy <= 0.01) then
		db.actor:kill(db.actor,true)
	end
	
	LimitUpdate(health_update, 1, time_global(), cactor)
end

function pulse()
	--Pulse
	local cactor = ACTOR:conditions()
	if not cactor then return end
	local pulse = cactor:PulseRate()
	local pulse_add = 0
	local a_timer = ACTOR:SlowMotionActive()
	if a_timer > 0 then
		pulse_add = pulse_add + adr_pulse
		--printf("area_health::pulse: adrenaline timer:%s",a_timer - time_global())
	end
	if (has_alife_info("claustrophobia") or has_alife_info("agoraphobia")) then
		local sim = alife()
		local gg = game_graph()
		local actor_level = sim:level_name(gg:vertex(sim:actor().m_game_vertex_id):level_id())
		local weather = level_name and game_ini():r_string_ex(actor_level,"weathers")
		if weather then
			if weather == "indoor" and has_alife_info("claustrophobia") then
				pulse_add = pulse_add + 20
			elseif weather ~= "indoor" and has_alife_info("agoraphobia") then
				pulse_add = pulse_add + 20
			end
		end
	end
		
	if (has_alife_info("radiophobia") and db.actor.radiation > 0) then
		pulse_add = pulse_add + 20
	end
	
	if pulse < 100 then
		pulse = math.clamp(pulse + pulse_add,pulse,100)
	end
	cactor:SetPulseRate(pulse)
	utils.save_var(db.actor,"pulse",nil)
end

--[[
function actor_on_item_use(obj)
	--if (axr_main.config:r_value("mm_options","enable_weight_speed",1,false) == true) then
		check_weight()
	--end
	
	local sec = obj:section()
	local eat_pain = INI:r_float_ex(sec,"eat_pain",0)
	local eat_psyhealth = INI:r_float_ex(sec,"eat_psyhealth",0)
	local cactor = db.actor:cast_Actor():conditions()
	cactor:SetTemperature(cactor:GetTemperature() + eat_pain)
	cactor:SetPain(cactor:GetPain() - eat_psyhealth/2)
end
--]]

function check_weight()
	if not db.actor then return end
	CreateTimeEvent(0,"weight_delay" ,0.01, function()
		local backpack = db.actor:item_in_slot(13)
		local suit = db.actor:item_in_slot(7)
		local weight = db.actor:get_total_weight()
		c_overweight = math.clamp(weight - (suit and suit:get_additional_max_weight() or 0) - (backpack and backpack:get_additional_max_weight() or 0) - (bind_artefact.art_weight_add or 0),0,weight)
		if show_log then
			printf("check_weight::weight bonuses suit:%s BP:%s belt:%s",suit and suit:get_additional_max_weight() or 0,backpack and backpack:get_additional_max_weight() or 0,bind_artefact.art_weight_add or 0)
			local delta_weight = c_overweight - OverWeight
			printf("check_weight:Weight:[%s] OverWeight [%s] delta_weight[%s]",weight, c_overweight, delta_weight)
			printf("weight [%s] sprint [%s] run [%s] runback [%s] jump [%s]",weight, db.actor:get_actor_sprint_koef(), db.actor:get_actor_run_coef(), db.actor:get_actor_runback_coef(), db.actor:get_actor_jump_speed())
			SetHudMsg(string.format("weight [%5.2f] sprint [%3.2f] run [%3.2f] back [%3.2f] jump [%4.2f]",weight, db.actor:get_actor_sprint_koef(), db.actor:get_actor_run_coef(), db.actor:get_actor_runback_coef(), db.actor:get_actor_jump_speed()),10)
		end
		OverWeight = c_overweight
		return true
	end)
end

function apply_traits()
	if not(db.actor) then return end
	
	printf("A.R.E.A.: Applying traits")

	local cactor = ACTOR:conditions()

	for i=1, #cond_info_table do
		printf("cond apply: %s", cond_info_table[i])
		if cond_info_table[i] == "athlete" then
			cactor:SetMaxPowerBonus(0.15)
			--cactor:ChangePowerLeakSpeed(-0.0001)
			--cactor:BoostPowerRestore(0.0000025)
		elseif cond_info_table[i] == "feeble" then
			feeble = {walk = -0.1, run = -0.25, sprint = -0.5}
			cactor:SetMaxPowerBonus(-0.15)
		elseif cond_info_table[i] == "survivor" then
			cactor:SetPainMax(1.15)
			cactor:BoostPain(INI:r_float_ex("actor", "pain_v", 0.00001)*1.1)
		elseif cond_info_table[i] == "agile" then
			agile = {walk = 0.1, run = 0.25, sprint = 0.5}
		elseif cond_info_table[i] == "steel_stomach" then
			cactor:SetToxicityMax(default_max_toxicity + 0.25)
			RegisterScriptCallback("actor_on_item_use", steel_stomach)
		elseif cond_info_table[i] == "pharmacist" then
			cactor:SetToxicityMax(cactor:GetToxicityMax()+0.15)
			RegisterScriptCallback("actor_on_item_use", pharmacist)
		elseif cond_info_table[i] == "agoraphobia" or
		  cond_info_table[i] == "claustrophobia" or
		  cond_info_table[i] == "radiophobia" then
			actor_pulse = true
		elseif cond_info_table[i] == "nervous" then
			utils.save_var(db.actor, "psy_resist_coeff", 1.1)
		elseif cond_info_table[i] == "iron_nerves" then
			utils.save_var(db.actor, "psy_resist_coeff", utils.load_var(db.actor, "psy_resist_coeff", 1) - 0.15)
		elseif cond_info_table[i] == "strong" then
			db.actor:set_actor_max_weight(40)
		elseif cond_info_table[i] == "weak" then
			db.actor:set_actor_max_weight(20)
		elseif cond_info_table[i] == "lethargic" then
			--cactor:ChangePowerLeakSpeed(0.001)		-- this changes power loss rate per update 
			--cactor:BoostPowerRestore(-0.0000015)		-- this changes power restore rate using satiety/thirst
			utils.save_var(db.actor,"bonus_sleep",-20)
		elseif cond_info_table[i] == "energetic" then
			--cactor:ChangePowerLeakSpeed(-0.001)
			--cactor:BoostPowerRestore(0.0000015)
			utils.save_var(db.actor,"bonus_sleep",20)
		elseif cond_info_table[i] == "resistent" then
		 	cactor:BoostShockImmunity(0.001)
			cactor:BoostChemicalBurnImmunity(0.001)
			cactor:BoostExplImmunity(0.001)
			cactor:BoostStrikeImmunity(0.001)
			cactor:BoostFireWoundImmunity(0.001)
			cactor:BoostWoundImmunity(0.001)
			cactor:BoostBurnImmunity(0.001)
			cactor:BoostRadiationImmunity(0.001)
		elseif cond_info_table[i] == "depressed" then
			utils.save_var(db.actor,"bonus_sleep",-30)
			cactor:BoostPain(INI:r_float_ex("actor", "pain_v", 0.00001)*0.95)
		elseif cond_info_table[i] == "hamhanded" then
			area_skills.raise_mul = 0.75
		elseif cond_info_table[i] == "marauder" then
			area_skills.marauder_mul = 1.6
		elseif cond_info_table[i] == "mechanic" then
			area_skills.craft_mul = 1.6
		elseif cond_info_table[i] == "gunlover" then
			area_skills.shooting_mul = 1.6
		elseif cond_info_table[i] == "handyman" then
			area_skills.raise_mul = 1.25
--[[
		elseif cond_info_table[i]:find("bruised_") then
			local h = hit()
			if cond_info_table[i]:find("_head") then
				h:bone("bip01_head")
			elseif cond_info_table[i]:find("_arm") then
				h:bone("bip01_r_upperarm")
			elseif cond_info_table[i]:find("_leg") then
				h:bone("bip01_l_thigh")
			else
				h:bone("bip01_spine1")
			end
			h.direction = VEC_ZERO
			h.draftsman = db.actor
			h.type = hit.strike
			h.power = 0.35
			h.impulse = 0.001
			db.actor:hit(h)
--]]
		elseif cond_info_table[i] == "adrenalin_rush" then
			adr_rush = 0.3
		elseif cond_info_table[i] == "hunger" then
			cactor:BoostSatiety(0.0000015)
		elseif cond_info_table[i] == "thirst" then
			cactor:BoostThirst(0.0000015)
		elseif cond_info_table[i] == "alcoholic" then
			cactor:BoostAlcohol(-0.00008)
			cactor:BoostHpRestore(-0.000005)
		elseif cond_info_table[i] == "teetotaler" then
			cactor:BoostAlcohol(0.00008)
			cactor:BoostHpRestore(0.000005)
		end
	end
	
	default_walk_coeff = default_walk_coeff + feeble.walk + agile.walk			-- set default walk speed
	default_run_coeff = default_run_coeff + feeble.run + agile.run				-- set default run speed
	default_sprint_coeff = default_sprint_coeff + feeble.sprint + agile.sprint	-- set default sprint speed
	ACTOR:ChangeWalkAccel(default_walk_coeff)
	db.actor:set_actor_run_coef(default_run_coeff)
	db.actor:set_actor_sprint_koef(default_sprint_coeff)
end

function check_traits()
	if not(db.actor) then return end
	local traits = alife_storage_manager.get_state().traits
	if show_log then
		printf("Health::check traits: traits:%s", traits)
	end
	if traits then
		local t = traits:to_table()
		for i=1,#t do
			cond_info_table[i] = t[i]:exclude("st_")
			give_info(cond_info_table[i])
		end
	end
	return true
end

--------------------------------------------Misc---------------------------------------------------

function steel_stomach(obj) 
	local sec = obj:section()
	local value = INI:r_float_ex(sec, "eat_radiation") or nil
	if value ~= 0 then
		db.actor.radiation = db.actor.radiation - value / 2
	end
end

function pharmacist(obj)
	local sec = obj:section()
	local boost_rad = INI:r_float_ex(sec,"boost_radiation_restore") or nil
	local boost_time = INI:r_float_ex(sec,"boost_time") or nil
	if boost_rad ~= 0 and boost_time > 0 then
		boost_rad = boost_rad + 0.000333 -- +1mSv/sec
		boost_time = boost_time / 2
		db.actor.radiation = -boost_rad*boost_time
	end
end

----------------icon hud ------------------
class "hud_icon_Health" (CUIScriptWnd)

function hud_icon_Health:__init(obj_hud) super(obj_hud)
    self.obj_hud = obj_hud
	self:SetWndRect(Frect():set(0, 0, device().width, device().height))
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("maingame.xml")
	self.ui_hud_icon_adrenaline = self.xml:InitStatic("flashing_icons:adrenaline_icon", self)
	self.ui_hud_icon_adrenaline:Show(false)
    self.to_render = false
end

function hud_icon_Health:__finalize()
    if self.to_render then
        self.ui_hud_icon_adrenaline:Show(false)
        self.obj_hud:RemoveDialogToRender(self)
        self.to_render = false
    end
end

function hud_icon_Health:show()
    if not self.to_render then
        self.obj_hud:AddDialogToRender(self)
        self.to_render = true
    end
    self.ui_hud_icon_adrenaline:Show(true)
end

function hud_icon_Health:hide()
    self:__finalize()
end
