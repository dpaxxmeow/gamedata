--===============================================================================
--18.02.2008 - added dynamic weather
--25.06.2011 - modified for AtmosFear 3 by Cromm Cruac
--28.12.2013 - modified by Alundaio for all levels
--08.02.2016 - modified by Alundaio to USE_MARSHAL
--===============================================================================
--17.04.2018 - modified by Tronex for global weather system
--===============================================================================
--30.08.2021 - modified for A.R.E.A. by MAGILA
--			   Code refactoring and optimization, added dynamic brightness 
--			   adjustment of hemi and amb in addition to bloom
--Last Edit: 01.10.2021
--===============================================================================
local weather_manager
local prev_sec = 0
local diff_sec = 0
local gini  = game_ini()

valid_levels = {}
bLevelUnderground = false
weather_tbl = atmosfear_options.weather_tbl

function atmosfear_init()
	--printf("-level_weathers: atmosfear_init")
	if not (is_empty(valid_levels)) then 
		return 
	end
	
	local levels = alun_utils.collect_section(gini,"level_maps_single")
	for i=1,#levels do
		weather = gini:r_string_ex(levels[i],"weathers")
		if (weather == "atmosfear") then
			valid_levels[levels[i]] = true
		end
	end
	
	if (not atmosfear_options.config:section_exist("atmosfear_current_parameters")) then
		--printf("-level_weathers: atmosfear_init - current_parameters don't exist")
		for	i = 1, #weather_tbl do
			atmosfear_options.config:w_value("atmosfear_current_parameters","opt_weather_" .. weather_tbl[i] .. "_period", random_choice(4,6,8))
			atmosfear_options.config:w_value("atmosfear_current_parameters","opt_weather_" .. weather_tbl[i] .. "_occur", math.random(2,3))
		end

		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_enable_blowout",1)
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_blowout_freq",48)
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_blowout_fate","turntozombie")
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_blowout_warning","radio_siren")
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_blowout_task","give")
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_enable_psi_storm",1)
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_psi_storm_freq",24)
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_psi_storm_fate","kill")
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_psi_storm_warning","siren")
		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_psi_storm_task","give")

		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_moon_phase","8days")

		atmosfear_options.config:w_value("atmosfear_current_parameters","opt_god_mode","false")
		atmosfear_options.config:save()
	end
end 

class "WeatherManager"
function WeatherManager:__init()
	--printf("-level_weathers: __init")
	self.SafeCover = alun_utils.collect_section(ini_file("misc\\surge_manager.ltx"),"list",true)
	self.___timer = 0
	self.weather_storage = {}
	self.cycle = get_random_weather()
	self.transition_period = false
	self.pre_blowout_period = false
	self.curr_weather = ""
	self.next_weather = ""
	self.last_hour = 0
	self.next_hour = 0
	self.last_period_change_hour = level.get_time_hours()
	self.forced_weather_change_on_time_change = false
	
	self.wfx_time = 0
	self.weather_fx = nil
	self.weatherType = "[default]"
	self.update_time = 0
	self.update_level = ""
	self.state = {}
	self.graphs = {}
	self.graphs_ini = ini_file("environment\\dynamic_weather_graphs.ltx")
	-- if not self.graphs_ini then
	-- 	--printf("error when open weather_dynamic_graphs.ltx")
	-- end
	self.dof_factor = 1
	self.period = "good"
	self.far_distances = {}
	self.wind_velocity={}
	self.ambient={}
	self.dof_kernels = {}
	self.inited_time = 0
	self.static_ini = ini_file("environment\\static1.ltx")
	self.boundaries = loadstring("return "..gini:r_string_ex(level.name(),"lightning_borders","{none}"))()
	self.lumscale_hemi = gini:r_float_ex(level.name(),"lumscale_hemi", 0)
	self.lumscale_amb = gini:r_float_ex(level.name(),"lumscale_amb", 0)
	self.auto_lighting = gini:r_bool_ex(level.name(),"auto_lighting", true)
	self.adjustment_value = 0
	self.storm_directions = {
								{-50,10},		{30,90},		{40,130},		{-110,-70},
								{10,60},		{-140,-70},		{-40,20},		{90,160},
								{-190,-140},	{10,90},		{120,170},		{-90,-20},
								{30,130},		{130,170},		{-130,-70},		{-10,50},
								{-170,-110},	{-80,-20},		{-190,-150},	{-60,-20},
								{-60,-30},		{-190,-150},	{-80,-20},		{50,110}
							}
	self.distant_sounds = {	"nature\\pre_storm_6",
							"nature\\pre_storm_7",
							"nature\\pre_storm_new_1",
							"nature\\pre_storm_new_2",
							"nature\\pre_storm_new_3",
							"nature\\pre_storm_new_4",
							"nature\\pre_storm_new_5",
							"nature\\pre_storm_new_6",
							"nature\\pre_storm_new_7",
							"nature\\pre_storm_new_8",
							"nature\\pre_storm_new_9"
						}
	self.thunders = {}
	self.thunder_index = 1
	self.distant_storm_prob = 0.5
	self.get_time_hours = level.get_time_hours()
	
	atmosfear_options.config = atmosfear_options.config or ini_file_ex("atmosfear_options.ltx",true)

	atmosfear_init()
	
	bLevelUnderground = valid_levels[level.name()] == nil
	
	self.PNV_effect = {
		lumscale_hemi = 0,
		lumscale_amb = 0,
		bloom_threshold = 0,
		bloom_kernel_scale = 0
	}
end

-- Вызывается после load(). Состояние погоды уже загружено.
function WeatherManager:reset()
	--alun_utils.debug_write("WeatherManager:reset")	
	local weather = gini:r_string_ex(level.name(),"weathers") or "[default]"
	self.weatherType = weather

	if weather ~= "[default]" then
		-- CC read DOF kernels and far_plane distances
		self.dof_kernels = alun_utils.parse_ini_section_to_array(self.graphs_ini,"dof_kernels")
		for cycle,dof in pairs(self.dof_kernels) do
			self.far_distances[cycle]={}
			self.wind_velocity[cycle]={}
			self.ambient[cycle]={}
			local phase
			if cycle == "clear" or cycle == "partly" then
				phase = "_0"
			else
				phase = ""
			end
			local cycle_ltx = ini_file(("environment\\weathers\\af3_dark_" .. cycle .. phase .. ".ltx"))
			for h = 0, 23 do
				local hour = self:get_hour_as_string(h)
				self.far_distances[cycle][hour] = cycle_ltx:r_float_ex(hour, "fog_distance", 0)
				self.wind_velocity[cycle][hour] = cycle_ltx:r_float_ex(hour, "wind_velocity", 0)
				self.ambient[cycle][hour] = cycle_ltx:r_string_ex(hour, "ambient") or 0
			end
		end
	end

	-- prepare periods
	self.next_period_change_hour = self:get_next_period_change_hour(self.cycle)
	self.inited_time = game.get_game_time()
	self.last_hour = self.get_time_hours
	self.next_hour = self.last_hour + 1
	if (self.next_hour > 23) then
		self.next_hour = self.next_hour - 24
	end
	
	-- enable distant storms
	local rnd = (math.random(1,100)/100)
	if (rnd <= self.distant_storm_prob) and valid_levels[level.name()] then
		self.distant_storm_on = true
	else
		self.distant_storm_on = false
	end
    self:select_weather(true)
end

function WeatherManager:first_update()
	local function update()
		self:update()
	end
	AddUniqueCall(update)
	local function state_PNV_effect(state)
		if state then
			self.PNV_effect = {
				lumscale_hemi = 0.8,
				lumscale_amb = 0.3,
				bloom_threshold = -0.3,
				bloom_kernel_scale = 1.9
			}
			self.PNV_effect_state = true
		else
			self.PNV_effect = {
				lumscale_hemi = 0,
				lumscale_amb = 0,
				bloom_threshold = 0,
				bloom_kernel_scale = 0
			}
			self.PNV_effect_state = false
		end
	end
	state_PNV_effect(false)
	RegisterScriptCallback("actor_on_night_vision", state_PNV_effect)
end

function WeatherManager:update()
	if time_global() > self.___timer then
		self.___timer = time_global() + 3000
		self.rain_factor = level.rain_factor()
		self.get_time_hours = level.get_time_hours()
		self._game_time = game.get_game_time()

		-- update every 1 hour, apply weather change if necessary
		if self.last_hour ~= self.get_time_hours then
			self.last_hour = self.get_time_hours
			self.next_hour = self.last_hour + 1
			if (self.next_hour > 23) then
				self.next_hour = self.next_hour - 24
			end
			self:check_period() -- fix
			self:change_period()
			self:select_weather(false)
		end
		
		-- apply distant storms and meteorites
		diff_sec = math.ceil(self._game_time:diffSec(self.inited_time)/level.get_time_factor())
		if (prev_sec ~= diff_sec) then
			prev_sec = diff_sec
			-- if (string.sub(self.levelWeather,1,9) == "atmosfear") then
				-- self:meteorites()
				-- self:distant_storm()
			-- end
		end

		if self.auto_lighting then self:LightingAdjustment() end

		if db.actor:alive() then
			local pos = db.actor:position()
			self:update_effect_pfx(pos)
			self:update_effect_fog(pos)
		end
	end
	
	Render.change_lumscale_hemi(self.lumscale_hemi-(self.adjustment_value*0.7)+self.PNV_effect.lumscale_hemi)
	Render.change_lumscale_amb(self.lumscale_amb-(self.adjustment_value*0.2)+self.PNV_effect.lumscale_amb)
	Render.change_bloom_kernel_scale((self.adjustment_value*0.5)+self.PNV_effect.bloom_kernel_scale)
	Render.change_bloom_threshold((-self.adjustment_value*0.1)+self.PNV_effect.bloom_threshold)
end

function WeatherManager:check_period()
	local current_hour = self.get_time_hours
	local period_ini = atmosfear_options.config:r_value("atmosfear_current_parameters","opt_weather_" .. self.cycle .. "_period",2,5)
	local period_saved = self.next_period_change_hour
	if (period_saved < current_hour) then 
		period_saved = period_saved + 24
	end
	
	-- if next period is longer than saved settings, change next period to be close
	if ((period_saved - current_hour) > tonumber(period_ini)) then
		self.next_period_change_hour = current_hour + 2
		if (self.next_period_change_hour > 23) then
			self.next_period_change_hour = self.next_period_change_hour - 24
		end
	end
end

function WeatherManager:change_period()
	local current_hour = self.get_time_hours
	local g_time = game.get_game_time()
	local diff_s = math.floor(surge_manager.SurgeManager._delta - g_time:diffSec(surge_manager.SurgeManager.last_surge_time))
	local diff_p = psi_storm_manager and math.floor(psi_storm_manager.PsiStormManager._delta - g_time:diffSec(psi_storm_manager.PsiStormManager.last_psi_storm_time)) or 0

	if (diff_s < 7200 and atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_blowout",2,1) ==1) or (diff_p < 7200 and atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_psi_storm",2,1)==1) or level.is_wfx_playing() then
		self.pre_blowout_period = true
		self.next_period_change_hour = self.next_period_change_hour + 1
		if (self.next_period_change_hour > 23) then
			self.next_period_change_hour = self.next_period_change_hour - 24
		end
	end

	-- if current hour is next period's last hour, switch period type, set next period's hour, transition is true
	if (current_hour == self.next_period_change_hour) then
		--printf(">>> Tronex: change_period | current_hour == self.next_period_change_hour")
		self.cycle = self:get_next_weather_cycle(self.cycle)
		self.last_period_change_hour = current_hour
		self.next_period_change_hour = self:get_next_period_change_hour(self.cycle)
		self.transition_period = true
	end
end

function WeatherManager:select_weather(now)
	-- get type ("atmosfear","indoor","[default]")
	local weather_valid = false
	local weather_cycle
	local weather = self.weatherType
	if not (weather) then 
		return
	end
	
	-- pick type of weather
	if (weather=="atmosfear") then
		weather_valid = true
		local level_name = level.name()
		if (self.transition_period == true) then -- transition weather
			weather = weather .. "_transition"
			weather_cycle = "cloudy"
			self.transition_period = false
		elseif (self.pre_blowout_period == true) then -- pre-surge weather
			weather = weather .. "_pre_blowout"
			weather_cycle = random_choice("foggy_no_sun","cloudy_no_sun")
			self.pre_blowout_period = false
		else -- normal weather
			if not (self.cycle) then
				self.cycle = "clear"
			end
			weather_cycle = self.cycle
			weather = weather .. "_" .. weather_cycle
		end
	end
	
	self.levelWeather = weather
	
	self:state_simulation(weather) -- not really used, kept it and the rest of functions just in case some is called from engine

	local weather_section_name = ""
	if weather_valid then
		weather_section_name = "af3_" .. weather_cycle
		if (weather_cycle == "clear") or (weather_cycle == "partly") then
			weather_section_name = weather_section_name .. "_" .. self:get_moon_phase()
		end
		
		-- set up current and next weather, used for many things like distant storms/Meteorites
		if now then
			self.curr_weather = weather_cycle
			self.next_weather = weather_cycle
		else
			self.curr_weather = self.next_weather
			self.next_weather = weather_cycle
		end
	else
		weather_section_name = weather
	end
	
	-- determine if weather change is required
	if now then
		self.last_hour = self.get_time_hours
		self.next_hour = self.last_hour+1
		if self.next_hour > 23 then
			self.next_hour = self.next_hour-24
		end
	end
	
	if self.forced_weather_change_on_time_change then
		now = true
		self.forced_weather_change_on_time_change = false
	end
	
	-- apply weather change
	if (self.weather_fx) then
		level.start_weather_fx_from_time(self.weather_fx, self.wfx_time)
		self.weather_fx = nil 
		self.wfx_time = 0
	else
		level.set_weather(weather_section_name,now)
	end
end

function WeatherManager:LightingAdjustment()
	--Adjusting the lighting at night
	local time = self._game_time:timeToString(1):gsub(":",".")
	time = tonumber(time)
	if time >= 17 and time <= 23 then
		self.adjustment_value = (time-17)/6
	elseif time > 23.0 or time < 1 then
		self.adjustment_value = 1
	elseif time >= 1 and time <= 9 then
		self.adjustment_value = (8/time)/8
	elseif time < 18 then
		self.adjustment_value = 0
	end
end

function WeatherManager:get_next_weather_cycle(curr_weather)
	local weather_table_num = {}
	local avail_weather = {}
	-- set initiate values for (weather_table_num)
	for i=1,#weather_tbl do
		weather_table_num[weather_tbl[i]] = 0
	end
	
	-- store correct occurrences for each stored weather cycle in (weather_table_num)
	for i=1,#self.weather_storage do
		for j=1,#weather_tbl do
			if self.weather_storage[i] == weather_tbl[j] then
				weather_table_num[self.weather_storage[i]] = weather_table_num[self.weather_storage[i]] + 1
				break
			end
		end
	end
	
	-- prepare a table of allowed weather cycles to pick from
	for i=1,#weather_tbl do
		if (weather_tbl[i] ~= curr_weather) then
			local val = tonumber(atmosfear_options.config:r_value("atmosfear_current_parameters","opt_weather_" .. weather_tbl[i] .. "_occur",2,3))
			if (val > 2.5) and (weather_table_num[weather_tbl[i]] < 2) then
				avail_weather[#avail_weather + 1] = weather_tbl[i]
			elseif (val > 1.5) and (weather_table_num[weather_tbl[i]] < 1) then
				avail_weather[#avail_weather + 1] = weather_tbl[i]
			end
		end
	end
	
	-- if no allowed weather cycles found, reset
	if (#avail_weather == 0) then
		--printf("-level_weathers: get_next_weather_cycle | #avail_weather = 0")
		self.weather_storage = {}
		return get_random_weather()
	end
	
	local pick = avail_weather[math.random(#avail_weather)]
	self.weather_storage[#self.weather_storage + 1] = pick -- store new value
	return pick
end

function WeatherManager:get_next_period_change_hour(weather_cycle)
	local hour = 0
	local len = atmosfear_options.config:r_value("atmosfear_current_parameters","opt_weather_" .. weather_cycle .. "_period",2,6)

	hour = math.random(math.ceil(len*2/3),len) + self.last_period_change_hour + 1
	if (hour > 23) then
		hour = hour - 24
	end
	
	return hour
end

function WeatherManager:round(n, precision)
	local m = 10^(precision or 0)
	return math.floor(m*n + 0.5)/m
end

function WeatherManager:forced_weather_change()
	self.forced_weather_change_on_time_change = true
end


function WeatherManager:get_hour_as_string(h)
	local hour_str=""
	if h>23 then
		h=h-24
	end
	if h<10 then
		hour_str="0" ..tostring(h) .. ":00:00"
	else
		hour_str=tostring(h) .. ":00:00"
	end
	return	hour_str
end

function WeatherManager:get_moon_phase()
	local months = {31,28,31,30,31,30,31,31,30,31,30,31}
	local g_time=game.get_game_time()
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = g_time:get(Y, M, D, h, m, s, ms)
	local day = 365*(Y-2010)+D
	for mm = 1, M-1 do
		day = day + months[mm]
	end
	if h >=12 then
		day = day+1
	end
	local moon = atmosfear_options.config:r_value("atmosfear_current_parameters","opt_moon_phase",0,"8days")
	local phase
	if moon=="28days" then
		phase = math.floor(math.mod(day,28)/3.5)
	elseif moon == "8days" then
		phase = math.mod(day,8)
	else
		phase = string.sub(moon,5)
	end
	--atmosfear.debugMessages[3]:SetText("phase=" ..tostring(phase))
	--atmosfear.debugMessages[4]:SetText("opt=" ..tostring(atmosfear.opt_moon_phase))
	return tostring(phase)
end

function WeatherManager:state_simulation(weather)
	local graph = self:get_graph_by_name(weather)
	if graph == nil then
		self.state[weather] = nil
	else
		if self.state[weather] == nil or self.state[weather].graph_name ~= weather then
			self.state={}
			self.state[weather] = self:init_by_graph(graph,weather)
		end
	end
end

function WeatherManager:init_by_graph(graph, graph_name)
	local cur_state = get_next_state(graph,"")
	local next_state = get_next_state(graph,cur_state)
	return {current_state = cur_state, next_state = next_state, graph_name = graph_name, graph = graph}
end

function WeatherManager:set_state_as_string(ss)
	if (not ss) or (ss == "") then
		return
	end

	self.state = {}
	local laststring
	for lvlstring in string.gmatch(ss,"[^;]+") do
		laststring=lvlstring
	end

	local i,j,grname,curs,nexs = string.find(laststring,"([^=]+)=([^,]+),([^,]+)")
	--if not grname then
	--	printf("WeatherManager:set_state_as_string: malformed state string. " .. ss)
	--end
	local current_state = self:unpack_state(curs)
	local next_state = self:unpack_state(nexs)
	local graph_name = self:unpack_graph_name(grname)
	local graph = self:get_graph_by_name(graph_name)
	self.curr_weather = current_state
	self.next_weather = current_state
	if graph ~= nil then
	-- Is this the last save? Then we believe that the weather is dynamic.
		self.state[graph_name] = {current_state = current_state, next_state = next_state, graph_name = graph_name, graph = graph}
	end
end

function WeatherManager:get_state_as_string()
	local lvlstrings = {}
	for lvl_name,st in pairs(self.state) do
		local curs = self:pack_state(st.current_state)
		local nexs = self:pack_state(st.next_state)
		local grn = self:pack_graph_name(st.graph_name)
		lvlstrings[#lvlstrings+1] = grn .. "=" .. curs .. "," .. nexs
	end
	return table.concat(lvlstrings,";")
end

-- Получить граф (таблицу переходов состояний погоды) по его названию и названию игрового уровня
function WeatherManager:get_graph_by_name(name)
	if not self.graphs[name] then
		self.graphs[name] = alun_utils.parse_ini_section_to_array(self.graphs_ini, name)
	end
	return self.graphs[name]
end

-- Запаковать название вершины графа
function WeatherManager:pack_state(state)
	return state
end

-- Распаковать название вершины графа
function WeatherManager:unpack_state(st)
	return st
end

-- Запаковать название графа переходов погоды
function WeatherManager:pack_graph_name(graph_name)
	return graph_name
end

-- Распаковать название графа переходов погоды
function WeatherManager:unpack_graph_name(grn)
	return grn
end

--##################################################################################################
--##									METEORITES
--##################################################################################################

function WeatherManager:meteorites()
	local meteorites_particle = CreateParticles("crommcruac\\meteorites")

	if (self.get_time_hours >= 22 or self.get_time_hours < 4)
	and ((self.curr_weather=="clear" and level.get_time_minutes() <= 30)
	or (self.next_weather=="clear" and level.get_time_minutes() >= 30))
	and not level.is_wfx_playing()
	then
		local actor_pos = db.actor:position()
		local particle_pos = vector():set(actor_pos.x, actor_pos.y + 500, actor_pos.z)
		if not meteorites_particle:playing() then
			meteorites_particle:play_at_pos(particle_pos)
		else
			meteorites_particle:move_to(particle_pos,vector():set(0,0,1))
		end
	elseif meteorites_particle:playing() then
		meteorites_particle:stop()
	end
end

--##################################################################################################
--##									DISTANT STORMS
--##################################################################################################

function WeatherManager:distant_storm()
	if self.distant_storm_on == nil and (self.next_weather == "cloudy"  and level.get_time_minutes() >= 30) then
		local rnd = (math.random(1,100)/100)
		if (rnd <= self.distant_storm_prob) then
			self.distant_storm_on = true
			self.thunders = {}
			self.thunder_index = 1
		else
			self.distant_storm_on = false
		end
	end

	for key,thunder in pairs(self.thunders) do
		local life_time = diff_sec-thunder.start_time
		if (life_time >= 30) then
			if thunder.sound ~= nil and thunder.sound:playing() then
				thunder.sound:stop()
			end
			self.thunders[key] = nil
		end
		if life_time >= 4 and life_time < 30 and thunder.hit == false then
			if thunder.sound ~= nil and thunder.sound:playing() then
				thunder.sound:stop()
			end
			if thunder.sound ~= nil then
				thunder.sound:play_at_pos(db.actor, thunder.sound_pos)
				thunder.sound.volume = 0.33
			end
			thunder.hit = true
		end
	end
	
	if self.distant_storm_on == true and ((self.curr_weather == "cloudy" and level.get_time_minutes() <= 30) or (self.next_weather == "cloudy"  and level.get_time_minutes() >= 30)) and (not level.is_wfx_playing()) then
		if self.next_thunder_at == nil then
			self.next_thunder_at = diff_sec + math.random(5, 10)
		end
		if self.next_thunder_at <= diff_sec then
			self:lightning()
			self.next_thunder_at = diff_sec + math.random(5, 10)
		end
	end

	if self.distant_storm_on ~= nil and (self.next_weather ~= "cloudy" and level.get_time_minutes() >= 30) then
		self.distant_storm_on = nil
		self.next_thunder_at = nil
	end
end

function WeatherManager:inside_boundaries(x, y)
	local inside = false
	if self.boundaries[1] ~= "none" then
		local vert = self.boundaries
		local i = 0
		local j = #self.boundaries
		for i = 1, #self.boundaries do
			if (vert[i][2] < y and vert[j][2] >= y or vert[j][2] < y and vert[i][2] >= y) then
				if (vert[i][1] + (y - vert[i][2])/(vert[j][2] - vert[i][2])*(vert[j][1] - vert[i][1]) < x) then
					inside = not inside
				end
			end
			j = i
		end
	end
	return inside
end

function WeatherManager:get_curr_weather()
	return self.cycle
end

function WeatherManager:get_curr_ambient()

	if (bLevelUnderground) then
		return ""
	end

	local last_hour_str=self:get_hour_as_string(self.last_hour) or 0
	return self.ambient[self.curr_weather][last_hour_str] or 0
end

function WeatherManager:get_wind_velocity()
	if (bLevelUnderground) then return 0 end
	
	local last_hour_str=self:get_hour_as_string(self.last_hour) or 0
	local next_hour_str=self:get_hour_as_string(self.last_hour+1) or 0
	
	
	local k1 = level.get_time_minutes()*0.0166
	local k2 = 1-k1
	
	return self.wind_velocity[self.curr_weather][last_hour_str]*k2+self.wind_velocity[self.curr_weather][next_hour_str]*k1
end

function WeatherManager:lightning()
	local effect = CreateParticles("crommcruac\\thunderbolts_distant_00",10)
	local sound = CreateSound(self.distant_sounds[math.random(1,#self.distant_sounds)])
	local actor_pos = db.actor:position()
	local h
	if level.get_time_minutes() < 30 then
		h=self.get_time_hours
	else
		h=self.get_time_hours + 1
	end
	if (h >= 24) then
		h = h - 24
	end

	direction = self.storm_directions[h + 1]
	local angle_dec = math.random(direction[1],direction[2])
	local angle_rad = math.rad(angle_dec)
	local last_hour_str = self:get_hour_as_string(self.last_hour)
	local next_hour_str = self:get_hour_as_string(self.next_hour)
	local last_dist = self.far_distances[self.curr_weather][last_hour_str]
	local next_dist = self.far_distances[self.next_weather][next_hour_str]
	local m = level.get_time_minutes()
	local current_far_distance = math.ceil(((next_dist - last_dist) * m / 60 + last_dist)*self.dof_factor)

	local distance = current_far_distance - 50
	local safe_distance = current_far_distance
	local sound_distance = 100
	local pos_x = math.sin(angle_rad)*distance
	local pos_z = math.cos(angle_rad)*distance
	local safe_pos_x = math.sin(angle_rad)*safe_distance
	local safe_pos_z = math.cos(angle_rad)*safe_distance
	local sound_pos_x = math.sin(angle_rad)*sound_distance
	local sound_pos_z = math.cos(angle_rad)*sound_distance
	if self:inside_boundaries(actor_pos.x + safe_pos_x, actor_pos.z + safe_pos_z) then
		local particle_pos = vector():set(actor_pos.x + pos_x, actor_pos.y + 10, actor_pos.z+pos_z)
		local sound_pos = vector():set(actor_pos.x + sound_pos_x, actor_pos.y, actor_pos.z + sound_pos_z)
		self.thunders[self.thunder_index] = {effect = effect, particle_pos = particle_pos, sound = sound, sound_pos = sound_pos, start_time = diff_sec, hit = false}
		self.thunders[self.thunder_index].effect:play_at_pos(self.thunders[self.thunder_index].particle_pos)
		self.thunder_index = self.thunder_index + 1
	-- else
		--atmosfear.debugMessages[13]:SetText("(" ..tostring(self.thunder_index) .. ") beyond the map - not launched")
	end
end

--##################################################################################################
--##									Particles
--##################################################################################################
function WeatherManager:update_effect_fog(pos)
	--fog effect
	local weather = self:get_curr_weather()
	local list_conditions = {clear = true, foggy = true, veryfoggy = true}
	if list_conditions[weather] and (self.get_time_hours >= 4) and (self.get_time_hours < 20) and (self.rain_factor > 0.1) then
		local fog_particles = CreateParticles("a_ufp_particles\\fog_move")
		local apos = pos.y
		pos:add(device().cam_dir:mul(200))
		pos.y = math.clamp(apos,pos.y,6)+1
		
		if (not self.fog_update) or time_global() > self.fog_update then
			self.fog_update = time_global() + (math.random(10,20)*10000)
			fog_particles:play_at_pos(pos)
			-- printf("-fog_play")
		end
	elseif (fog_particles and fog_particles:playing()) then
		fog_particles:stop()
	end
end

function WeatherManager:update_effect_pfx(pos)
	local function inside()
		-- Check if actor is inside
		for k,v in pairs(self.SafeCover) do --Yasti: checks to see if actor is in an emission safe cover zone or not
			local zone = db.zone_by_name[k]
			if (zone and zone:inside(pos)) or bLevelUnderground then
				return true
			end
		end
	end

	local function update_pos(pfx, num)
		if (not num) or self.rain_factor > num then
			if (not self.pfx_update) or time_global() > self.pfx_update then
				self.pfx_update = time_global()+100
				pfx:play_at_pos(pos)
			end
		end
	end

	local weather = self:get_curr_weather()
	if inside() then
		self.pfx = CreateParticles("lanforse\\dust_particles")
		if (not self.pfx:playing())then
			local apos = pos
			pos:add(device().cam_dir:mul(3))
			pos.y = apos.y+0
			self.pfx:play_at_pos(pos)
			-- printf("-dust_particles")
		end
	elseif weather == "veryfoggy" and self.get_time_hours >= 5 and self.get_time_hours < 20 then	
		pos.x = pos.x + 0
		pos.y = math.clamp(pos.y,pos.y,1)+1
		pos.z = pos.z + 0
		self.pfx = CreateParticles("lanforse\\fog_heavy_dx10")
		update_pos(self.pfx, 0.1)
		-- printf("-fog_heavy_dx10")	
	elseif (weather == "foggy") or ((weather == "veryfoggy") and ((self.get_time_hours < 5) or (self.get_time_hours >= 20))) then	
		pos.x = pos.x + 0
		pos.y = math.clamp(pos.y,pos.y,1)+0.5
		pos.z = pos.z + 0
		self.pfx = CreateParticles("lanforse\\fog_light")
		update_pos(self.pfx, 0.05)
	elseif (weather == "clear") and (self.get_time_hours >= 4) and (self.get_time_hours < 20) then
		self.pfx = CreateParticles("lanforse\\fog_mist")
		
		if self.pfx:playing() == false then
			local apos = pos.y
			pos:add(device().cam_dir:mul(80))
			pos.y = math.clamp(apos,pos.y,6)+1
			self.pfx:play_at_pos(pos)
			-- printf("-fog_mist")
		end
	elseif (weather == "storm") and (self.rain_factor > 0.5) then	
		pos.x = pos.x + math.random(-10,10)
		pos.y = math.clamp(pos.y,pos.y,20)
		pos.z = pos.z - 20
		self.pfx = CreateParticles("lanforse\\storm_heavy")
		update_pos(self.pfx)
		-- printf("-storm_heavy: " .. self.rain_factor)
	elseif (weather == "cloudy") and (self.rain_factor > 0.5) and (self:get_curr_ambient() == "tuman") then	
		self.pfx = CreateParticles("lanforse\\snow_light")
		pos.y = pos.y+0
		pos:add(device().cam_dir:mul(5))
		update_pos(self.pfx)
		-- printf("-snow_light: " .. self.rain_factor)
	elseif (self.pfx and self.pfx:playing()) then
		self.pfx:stop()
	end
end
--##################################################################################################
--##									SAVE/LOAD
--##################################################################################################

function WeatherManager:load_state(m_data)
	if not (m_data.weather_manager) then 
		return
	end
	self.levelWeather = m_data.weather_manager.levelWeather
	self.period = m_data.weather_manager.period
	self.cycle = m_data.weather_manager.cycle or get_random_weather() -- new
	self.weather_storage = m_data.weather_manager.weather_storage or {} -- new
	self.last_period_change_hour = m_data.weather_manager.last_period_change_hour
	self.next_period_change_hour = m_data.weather_manager.next_period_change_hour
	self.PNV_effect_state = m_data.PNV_effect_state or false
	--self.state = m_data.weather_manager.state or self.state or {}
	if (not bLevelUnderground) then 
		self.update_time = m_data.weather_manager.update_time
		self.weather_fx = m_data.weather_manager.weather_fx
		self.wfx_time = m_data.weather_manager.weather_fx_time or 0
	end
	if (self.levelWeather == "atmosfear_transition") then 
		self.transition_period = true
	elseif (self.levelWeather == "atmosfear_pre_blowout") then
		self.pre_blowout_period = true
	end
end 

function WeatherManager:save_state(m_data)
	m_data.weather_manager = {}
	m_data.weather_manager.levelWeather = self.levelWeather
	m_data.weather_manager.period = self.period
	m_data.weather_manager.cycle = self.cycle -- new
	m_data.weather_manager.weather_storage = self.weather_storage -- new
	m_data.weather_manager.last_period_change_hour = self.last_period_change_hour
	m_data.weather_manager.next_period_change_hour = self.next_period_change_hour
	m_data.PNV_effect_state = self.PNV_effect_state
	--m_data.weather_manager.state = self.state
	
	if (not bLevelUnderground) then 
		m_data.weather_manager.update_time = self.update_time
		if (level.is_wfx_playing()) then
			m_data.weather_manager.weather_fx = level.get_weather()
			m_data.weather_manager.weather_fx_time = level.get_wfx_time() or 0
		end
	end
end 

function WeatherManager:load(F)
	set_save_marker(F, "load", false, "WeatherManager")
	self.levelWeather = F:r_stringZ()
	self.period = F:r_stringZ()
	self.cycle = F:r_stringZ() or get_random_weather() -- new
	if self.levelWeather == "atmosfear_transition" then
		self.transition_period = true
	end
	if self.levelWeather == "atmosfear_pre_blowout" then
		self.pre_blowout_period = true
	end
	self.last_period_change_hour = F:r_u32();
	self.next_period_change_hour = F:r_u32();
	local state_string = F:r_stringZ();
	-- printf("str = "..state_string)
	if state_string == "" then
		--printf("str = empty string")
	end
	self:set_state_as_string(state_string)
	self.update_time = F:r_u32();
	local str = F:r_stringZ()
	if(str~="nil") then
		self.weather_fx = str
		self.wfx_time = F:r_float()
	end
	set_save_marker(F, "load", true, "WeatherManager")

end

function WeatherManager:save(F)
	set_save_marker(F, "save", false, "WeatherManager")
	F:w_stringZ(self.cycle) -- new
	F:w_stringZ(self.levelWeather or "atmosfear_transition")
	F:w_stringZ(self.period)
	F:w_u32(self.last_period_change_hour);
	F:w_u32(self.next_period_change_hour);
	F:w_stringZ(self:get_state_as_string())
	F:w_u32(self.update_time)
	F:w_stringZ(tostring(self.weather_fx))
	if(self.weather_fx) then
		F:w_float(level.get_wfx_time())
	end
	set_save_marker(F, "save", true, "WeatherManager")
end

function WeatherManager:finalize()
	for key,thunder in pairs(self.thunders) do
		if (thunder.effect and thunder.effect:playing()) then 
			thunder.effect:stop()
		end
	end
end

--##################################################################################################
--##									helpers
--##################################################################################################

function get_weather_manager ()
	--printf("-level_weathers: get_weather_manager")
	if not weather_manager then
		weather_manager = WeatherManager()
	end
	return weather_manager
end

function get_next_state(graph,state)
	local sum = 0
	for st,prob in pairs(graph) do
		sum = sum+prob
	end
	local rnd = (math.random(1,100)/100)*sum
	local next_state
	for st,prob in pairs(graph) do
		next_state = st
		rnd = rnd-prob
		if (rnd <= 0) then
			break
		end
	end
	return next_state
end

function get_random_weather()
	local tbl = {}
	local ini = ini_file_ex("atmosfear_options.ltx",true)
	if (ini:section_exist("atmosfear_current_parameters")) then
		for i=1,#weather_tbl do
			local a = ini:r_value("atmosfear_current_parameters","opt_weather_" .. weather_tbl[i] .. "_occur",2,6)
			if (a > 1) then
				tbl[#tbl+1] = weather_tbl[i]
				--printf("-level_weathers: get_random_weather | " .. weather_tbl[i])
			end
		end
		if (#tbl > 0) then
			return tbl[math.random(#tbl)]
		end
	end
	return weather_tbl[math.random(#weather_tbl)]
end