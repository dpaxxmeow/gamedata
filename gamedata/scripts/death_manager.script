local item_by_community = {}
local item_count = {}
local always_keep_item = {}
local item_by_story_id
local death_ini = ini_file("misc\\death_generic.ltx")
local cond_items
local outfit_drop_condition = {}
local default_loot_accepted = {}
local damage_in_parts = {}
local bones_list = {
	arms = {21,22,23,24,25,26,27,28,29,30,31,32,		--left arm
			33,34,35,36,37,38,39,40,41,42,43,44,45},	--right arm
	legs = {3,4,5,6,									--left leg
			7,8,9,10},									--right leg
	body = {0,1,2,11,12,13,20},							--body,torso
	head = {14,15,16,17,18,19}							--head
}

local function bones_chek(index)
	for name, i in pairs(bones_list) do
		for __, id in pairs(i) do
			if index == id then
				return name
			end
		end
	end
end

local function damage_sum_chek_name(id, name)
	local sum = 0
	for _, num in pairs(damage_in_parts[id][name]) do
		sum = sum+num
	end
	return sum
end

local function IsDefaultLoot(item_id)
	if default_loot_accepted[item_id] then
		return true
	else
		return false
	end
end

local function RemoveDefaultLoot(item_id)
	default_loot_accepted[item_id] = nil
end

local function load_state(n_data)
	default_loot_accepted = n_data.npc_default_loot_accepted or default_loot_accepted
	n_data.npc_default_loot_accepted = nil
end
local function save_state(n_data)
	n_data.npc_default_loot_accepted = default_loot_accepted
end

function on_game_start()
	init_drop_settings()
	RegisterScriptCallback("npc_on_death_callback", death_callback)
	RegisterScriptCallback("npc_on_before_hit", npc_on_before_hit)
	RegisterScriptCallback("npc_on_body_search", on_body_search)
	RegisterScriptCallback("npc_on_first_update", npc_on_first_update)
	RegisterScriptCallback("object_spawn_supplies_loadout", object_spawn_supplies_loadout)
	RegisterScriptCallback("object_spawn_supplies", object_spawn_supplies_loadout)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("save_state", save_state)
end

function npc_on_first_update(npc)
	local id = npc:id()
	local tbl = get_outfit_by_npc_visual(npc:get_visual_name())
	local outfit_section = tbl and tbl[1]
	local helmet_section = tbl and tbl[2]

	damage_in_parts[id] = {
		head = {},--Голова
		body = {},--Туловище
		legs = {},--Ноги
		arms = {},--Руки
		outfit = outfit_section and INI:parameters_table(INI:r_string_ex(outfit_section,"immunities_sect", string.format("immunities_sect parameter is missing [%s]", outfit_section))) or {},  --Получить все пораметры имунитета брони.
		helmet = helmet_section and INI:parameters_table(INI:r_string_ex(helmet_section,"immunities_sect", string.format("immunities_sect parameter is missing [%s]", helmet_section))) or {},  --Получить все пораметры имунитета шлема.
		helmet_allowed = outfit_section and INI:r_bool_ex(outfit_section, "helmet_allowed", true) or true
	}
end

function object_spawn_supplies_loadout(se_obj, se_item, create_section)
	if IsStalker(se_obj) and not IsStalker(se_item) then
		default_loot_accepted[se_item.id] = true
	end
end

function npc_on_before_hit(npc, shit, bone_id, flags)
	if bone_id == 65535 then
		printf(" ERROR: bone_id == 65535 NPC NAME [%]", npc:name())
		return
	end

	local id = npc:id()
	local name_part = bones_chek(bone_id)
	local damage_p = damage_in_parts[id]
	if damage_p == nil then return end
	if damage_p and damage_p[name_part] then
		local hit_to_section = {
			[hit.light_burn] = "burn_immunity",
			[hit.burn] = "burn_immunity",
			[hit.strike] = "strike_immunity",
			[hit.shock] = "shock_immunity",
			[hit.wound] = "wound_immunity",
			[hit.radiation] = "radiation_immunity",
			[hit.telepatic] = "telepatic_immunity",
			[hit.chemical_burn] = "chemical_burn_immunity",
			[hit.explosion] = "explosion_immunity",
			[hit.fire_wound] = "fire_wound_immunity",
		}
		
		local power = shit.power*100
		if shit.power == 1000 then
			power = 10
		end
		if name_part == "head"  then
			local immun_hit_type = damage_in_parts[id].helmet[hit_to_section[shit.type]]
			if damage_in_parts[id].helmet_allowed and immun_hit_type then
				table.insert(damage_in_parts[id][name_part], power*immun_hit_type)
			else
				immun_hit_type = damage_in_parts[id].outfit[hit_to_section[shit.type]]
				if immun_hit_type then
					table.insert(damage_in_parts[id][name_part], power*immun_hit_type)
				end
			end
			
			--let's improve your skill
			if shit.draftsman and shit.draftsman:id() == db.actor:id() then
				local active_item = shit.draftsman:active_item()
				if active_item and not IsKnife(active_item) then
					area_skills.raise_skill("shooting_skill", 0.05)
				end
			end
		else
			local immun_hit_type = damage_in_parts[id].outfit[hit_to_section[shit.type]]
			if immun_hit_type then
				table.insert(damage_in_parts[id][name_part], power*immun_hit_type)	
			end
		end
	else
		printf("!ERROR: BONE %s isn't in damage list (damage_p[] == %s) name_part(%s)", bone_id, damage_p, name_part)
	end
	return flags.ret_value
end

function init_drop_settings()
	-- Create a list by community of the percent chance to spawn an item
	local community_list = {"stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky"}
	for k,v in pairs(community_list) do
		item_by_community[v] = {}
		if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			for i=0,n-1 do
				local result, id, value	= death_ini:r_line_ex(v,i)
				if result then
					item_by_community[v][id] = value and tonumber(value) or 0
					--printf("item by community difficulty multi %s : %s",temp,item_by_community[v][id])
				end
			end
		end
	end

	local n = death_ini:line_count("item_count")
	local id, value = "", ""
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("item_count",i)
		if result then
			local p = value:to_table()
			if (#p > 0) then
				p[1] = tonumber(p[1]) or 0
				p[2] = tonumber(p[2]) or p[1]
				item_count[id] = {math.floor(p[1]),math.floor(p[2])}
				--printf("item_count[id] min%s:max%s",item_count[id][1],item_count[id][2])
			end
		end
	end
	
 	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("keep_items",i)
		if value == "true" then
			always_keep_item[id] = true
		end
	end
	
	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("spawn_by_story_id")
	for i=0,n-1 do
		if not (item_by_story_id) then 
			item_by_story_id = {}
		end
		local result, id, value	= death_ini:r_line_ex("spawn_by_story_id",i)
		item_by_story_id[id] = value
	end
	
	-- Create a list of item sections that have random condition on death
	local n = death_ini:line_count("random_condition_items")
	for i=0,n-1 do
		if not (cond_items) then
			cond_items = {}
		end
		local result, id, value = death_ini:r_line_ex("random_condition_items",i)
		cond_items[id] = value
	end
	
	-- Create a list of outfit drop condition based on rank
	local n = death_ini:line_count("outfit_drop_condition")
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("outfit_drop_condition",i)
		local p = value:to_table()
		if (#p > 0) then
			p[1] = tonumber(p[1]) or 0.1
			p[2] = tonumber(p[2]) or p[1]
			outfit_drop_condition[id] = {math.ceil(p[1] * 100) , math.ceil(p[2] * 100)}
		end
	end
end

function death_callback(npc, who)
	create_release_item(npc, who)
	npc:iterate_inventory(keep_item, npc, who)
	default_loot_accepted[npc:id()] = nil
end

function create_release_item(npc,who)
	
	-- Gather NPC info
	local npc_id = npc:id()
	local npc_comm = character_community(npc)
	local npc_rank = ranks.get_obj_rank_name(npc)
	give_info(npc_id.."_dd_marauder_skill")
	-- spawn items by story id
	local sid = item_by_story_id and get_object_story_id(npc:id())
	if (sid and item_by_story_id[sid]) then
		local p = xr_logic.pick_section_from_condlist(db.actor, npc, utils.parse_condlist(item_by_story_id[sid]))
		--local p = item_by_story_id[sid]:to_table()
		--printf("sid=%s p=%s",sid,p)
		if (p and p ~= "" and p ~= "nil") then
			create_items(npc, p, 1, 100)
		end
	end

	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_spawn_loot") then
		return
	end
	
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_spawn_loot")) then 
		return
	end
	
	-- Spawn outfit and helmet
	spawn_outfit(npc, npc_id, npc_comm, npc_rank)
	
	--npc:iterate_inventory(try_spawn_ammo_for_weapon,npc)
	--printf("release_item for id:%s", npc:id())
	for sec,v in pairs(item_by_community[character_community(npc)] or {}) do
		if (v > 0 and item_count[sec]) and not utils.is_ammo(sec) then
			local number = math.random(item_count[sec][1], item_count[sec][2])
			
			-- Bookworm Food achievement.
			-- Changes memory sticks to rare PDAs when no articles left.
			if (sec == "itm_guide_usb_1" or sec == "itm_guide_usb_2" or sec == "journal" or sec == "survivalguide") then
				-- Check locked articles count instead of for achieved_bookworm_food infoportion.
				-- If articles are added after achievement is unlocked, they might become unobtainable.
				if dxr_encyclopedia.get_articles_locked_count() == 0 then
					sec = "itm_pda_rare"
				end
			end
			--printf("create %s(%s) for id:%s random:%s", sec, number, npc:id(), v)
			create_items(npc, sec, number, v)
		end
	end
end

function on_body_search(obj, who)
	local check_id = dialogs.who_is_npc(obj,who):id()
	if db.actor:has_info(check_id .. "_dd_processed") or ((not db.actor:has_info(check_id .. "_on_debt_complete") and alun_utils.load_var(db.actor, check_id .. "_debt_amount", false))) then
		db.actor:disable_info_portion(dialogs.who_is_npc(obj,who):id() .. "_dd_processed")
		dialogs.give_debt(obj, who)
	end
	
	if who and (who:id() == db.actor:id()) then
		if db.actor:has_info(check_id .. "_dd_marauder_skill") then
			if lootmoney then lootmoney.lootmoney(obj) end
			area_skills.raise_skill("marauder_skill",0.005)
			disable_info(check_id .. "_dd_marauder_skill")
		end
	else
		disable_info(check_id .. "_dd_marauder_skill")
	end
end

function keep_item(npc, item, dont_change)
	if not (item) then 
		return 
	end 
	-- keep items listed in always_keep_item table
	local item_section = item:section()
	local item_id = item:id()
	if (always_keep_item[item_section]) then 
		return 
	end 
	
	local se_item = alife_object(item_id)
	if not (se_item) then 
		return
	end
	-- release items with a "dont_keep_items" npc spawn section
	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_keep_items") then
		alife():release(se_item, true)
		return
	end
	-- release items with a "dont_keep_items = true " line in script logic
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_keep_items")) then
		alife():release(se_item, true)
		return
	end 
	
	--List of animation objects that we never want to drop as an item.
	local animationObjects = {
		["medkit_script"] = true,
		["guitar_a"] = true,
		["guitar_a2"] = true,
		["harmonica_a"] = true,
		["wpn_binoc"] = true,
		["anim_binoc"] = true,
		["anim_knife"] = true,
		["device_torch"] = true,
		["hand_radio"] = true,
		["hand_radio_r"] = true,
		["stick_bred"] = true,
		["stick_kolbasa"] = true,
		["stick_kolbasa_bred"] = true,
		["stick_rat"] = true,
		["sigaret_for_npc"] = true,
		["pda_for_npc"] = true
	}
	
	--If our section is one of the above animation objects, release it and return.
	if animationObjects[item_section] then
		alife():release( se_item, true )
		return
	end
	-- keep all Artefacts
	if IsArtefact(item) then
		return
	end
	-- exit here if dont_change variable exists
	--printf("dont change: %s", dont_change)
	if (dont_change) then return end
	-- set random charge count for items with charges
	local max_uses = item:get_max_uses() or 1
	--printf("Max_uses:%s section:%s", max_uses, item:section())
	if max_uses > 1 then
		local m = math.ceil(max_uses * math.random(0,2))
		if (m > 0) then 
			local r = math.random(0,m)
			item:set_remaining_uses(r)
			if (r == 0) then 
				alife():release(se_item, true)
			end
			return
		end
	--elseif item:section():find("battery_") then
	elseif cond_items[item_section] then
		item:set_condition(math.clamp((math.random(10,100)/100),0.1, 1))
	end

	--Remove Default pda
	if item_section:is_contain("device_pda") and IsDefaultLoot(item_id) then
		RemoveDefaultLoot(item_id)
		alife():release(se_item, true)
		return
	end

	--Remove Default ammo
	if IsAmmo(item) and IsDefaultLoot(item_id) then
		RemoveDefaultLoot(item_id)
		alife():release(se_item, true)
		return
	end
	
	if IsWeapon(item) and not IsGrenade(item) and IsDefaultLoot(item_id) then
		RemoveDefaultLoot(item_id)
		local rankAdd = {
			["novice"] = -5,
			["trainee"] = 0,
			["experienced"] = 2,
			["professional"] = 5,
			["veteran"] = 7,
			["expert"] = 10,
			["master"] = 15,
			["legend"] = 20
		}
		
		local communityAdd = {
			["zombied"] = -10,
			["bandit"] = -5,
			["army"] = 5,
			["killer"] = 5
		}
		-- set adjusted weapon condition (36 - 65 + adjustments)
		local condition = (math.random(5,21)+5)
		condition = condition + (rankAdd[ranks.get_obj_rank_name(npc)] or 0) + (communityAdd[npc:character_community()] or 0)
		if IsKnife(item) then condition = condition + 10 end
		condition = math.clamp(condition, 0, 100)
		item:set_condition(condition / 100)
		-- spawn extra inventory ammo if weapon
		try_spawn_ammo_for_weapon(npc, item)
		-- Set random ammo in mag
		item:set_ammo_elapsed(math.random(0,item:get_ammo_in_magazine()))
	end
end

function get_comb_coeff(rank,comm)
	local rank_coeffs_table = {novice = 0.3, trainee = 0.4, experienced = 0.5, professional = 0.6, veteran = 0.7, expert = 0.8, master = 0.9, legend = 1}
	local comm_coeffs_table = {zombied = 1, ecolog = 7, bandit = 10, freedom = 15, stalker = 17, clearsky = 20, dolg = 23, killer = 25, army = 27, monolith = 30}
	local rank_coeff = rank_coeffs_table[rank] or 0
	local comm_coeff = comm_coeffs_table[comm] or 0
	return rank_coeff * comm_coeff / (rank_coeffs_table.legend * comm_coeffs_table.monolith)
end

function get_outfit_by_npc_visual(visual,clean)
	local s_name = visual:to_table("\\")
	local v_name = clean and s_name[1] or s_name[3]
	return get_outfit_by_visual(v_name)
end

function get_outfit_by_visual(visual)
	local str = death_ini:r_string_ex("visual_outfits",visual)
	return str and str:to_table()
end

function spawn_outfit(npc, npc_id, npc_comm, npc_rank)
	local coef = get_comb_coeff(npc_rank,npc_comm)^0.44
	local tbl = get_outfit_by_npc_visual(npc:get_visual_name())
	local outfit_section = tbl and tbl[1]
	local helmet_section = tbl and tbl[2]

	-- Get suitable condition
	local function get_condition_by_rank(rank,coef)
		local min_con = outfit_drop_condition[rank] and outfit_drop_condition[rank][1] or 10
		local max_con = outfit_drop_condition[rank] and outfit_drop_condition[rank][2] or 40
		return utils.mean_random(min_con, max_con, coef, 7)/100
	end
	
	local function spawn_with_condition(section, condition, id)
		-- create server object without spawning the item
		local se_outfit = alife():create(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), id)

		level_get_object(se_outfit.id, function(obj)
			obj:set_condition(condition)
		end, 300)

		if not (se_outfit and se_outfit.id) then
			log("!ERROR: function spawn_outfit Failed to create an outfit.")
		end
	end

	if (axr_main.config:r_value("mm_options","enable_outfit_drop", 1, true) == true) then
		if axr_main.config:r_value("mm_options","enable_outfit_real_condition", 1, true) == true then
			local c_rank = get_comb_coeff(npc_rank,npc_comm)^0.30
			--Общий урон по голове.
			local d_head = damage_sum_chek_name(npc_id, "head")
			--Общий урон по туловичу, ногам, рукам, если шлем не разрешон ущё голова.
			local d_body = damage_sum_chek_name(npc_id, "body") + (damage_sum_chek_name(npc_id, "legs")*0.4) + (damage_sum_chek_name(npc_id, "arms")*0.2)
			
			local helmet_domage = ((math.random(35,85)/100)*c_rank) - d_head
			if helmet_domage < 0 then
				helmet_domage = 0
			end
			
			local domage_outfit = ((math.random(35,85)/100)*c_rank) - d_body
			if domage_outfit < 0 then
				domage_outfit = 0
			end

			if not damage_in_parts[npc_id].helmet_allowed then
				domage_outfit = (domage_outfit + helmet_domage)/2
			end

			if outfit_section and INI:section_exist(outfit_section) then
				spawn_with_condition(outfit_section, domage_outfit > 0.01 and domage_outfit or 0.01 , npc_id)
			end
			
			if helmet_section and INI:section_exist(helmet_section) then
				spawn_with_condition(helmet_section, helmet_domage > 0.01 and helmet_domage or 0.01, npc_id)
			end
		else
			-- Spawn outfit
			if outfit_section and INI:section_exist(outfit_section) then
				spawn_with_condition(outfit_section, get_condition_by_rank(npc_rank, coef), npc_id)
			end
			-- Spawn helmet
			if helmet_section and INI:section_exist(helmet_section) then
				spawn_with_condition(helmet_section, get_condition_by_rank(npc_rank, coef), npc_id)
			end
		end
	end
end

function try_spawn_ammo_for_weapon(npc,itm)
	if not (IsWeapon(itm)) then 
		return 
	end
	
	local ammo_class = INI:r_list_ex(itm:section(), "ammo_class", nil)
	if not (ammo_class) then
		return
	end
	
	-- randomly spawn only 1 ammo type per found weapon
	local ammo_type = itm:get_ammo_type()+1
	local sec = ammo_class[ammo_type]
	if (sec and item_count[sec]) then 
		local number = math.random(item_count[sec][1], item_count[sec][2])
		if (number > 0 and INI:section_exist(sec)) then
			number = math.floor(area_skills and 1+0.1+area_skills.skills_table.marauder_skill/200 or 1)*number
			create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
		end
	end

	ammo_class = INI:r_list_ex(itm:section(), "grenade_class", nil)
	if not (ammo_class and #ammo_class > 0) then 
		return
	end
	
	-- spawn grenade ammo if there is launcher attached
	if (INI:r_float_ex(itm:section(),"grenade_launcher_status",0) > 0) then
		local se_item = alife_object(itm:id())
		if (se_item) then
			local flags = se_item:get_addon_flags()
			if (flags:is(cse_alife_item_weapon.eWeaponAddonGrenadeLauncher)) then
				for i, section in ipairs(ammo_class) do
					if (section and item_count[section]) then 
						local number = math.random(item_count[section][1], item_count[section][2])
						if (number > 0 and INI:section_exist(section)) then
							create_ammo(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), number)
						end
					end
				end
			end
		end
	end
end

function create_items(npc, section, number, rnd)
	if not (INI:section_exist(section)) then 
		--printf("death_manager: ERROR: trying to spawn section that doesn't exist! %s",section)
		return 
	end 
	
	--printf("death_dropped: create %s=%s",section,number)
	rnd = math.floor(area_skills and 1+0.1+area_skills.skills_table.marauder_skill/200 or 1)*rnd
	if (utils.is_ammo(section))then
		if number > 0 then
			create_ammo(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), number)
		end
	else
		for i=1, number do
			if (math.random(1,1000)/1000 <=  rnd) then
				local se_obj = alife():create(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
				if se_obj then --and (axr_main.config:r_value("mm_options","enable_random_death_charge",1,false) == true) then
					local max_uses = INI:r_float_ex(se_obj:section_name(), "max_uses", 1)
					local bonus = area_skills and 3.5*(area_skills.skills_table.marauder_skill/100) or 1

					if max_uses > 1 then
						level_get_object(se_obj.id, function(obj)
							obj:set_remaining_uses(math.random((bonus > 1) and math.ceil(max_uses/2) or 1, max_uses))
						end, 300)
					elseif cond_items[section] then
						level_get_object(se_obj.id, function(obj)
							local cond = ((math.random(10,70)*bonus)/100)
							obj:set_condition(math.clamp(cond,0.1,1))
						end, 300)
					end
				end
			end
		end
	end
end