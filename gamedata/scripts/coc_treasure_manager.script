--[[
------------------------------------------------------------------------------------------------------------------
-- Treasure randomizer
-- by Alundaio
------------------------------------------------------------------------------------------------------------------
This script spawns loot, randomly, inside all INVBOX class objects. Loot is determined on new game start and stored
within the .scoc as a string. When the cache is opened, the loot is spawned.

A list of all valid item sections is generated automatically by parsing all of system_ini(). From this list, loot can be obtained. If you do not 
want a certain section from being spawned, put it in 'plugins\treasure_blacklist' 'ignore_sections'.

A valid item section is determined by several factors:
1. It must have can_trade = true
2. It must have quest_item = false 
3. It must not have '_mp' in it's section name
4. It must have a valid 'inv_name' value
5. 'cost' must be greater than 0

To debug or to obtain a list of valid item sections, simply enable DEV_DEBUG (-dbg in command line).
You shall find a 'valid_item_sections.ltx' in your main game directory after you start a new game.

To debug the actual results, start a new game. Then while in the loadscreen menu ctrl+left-click on the new 'autosave'. You 
will find the <filename>.lua in your savegame folder. Search the file for 'caches'
--]]
local valid_item_sections = ini_file("plugins\\coc_treasure_manager.ltx")
local count_weapon_valid_prefix = valid_item_sections:line_count("weapon_valid_prefix")-1
local count_ignore_sections = valid_item_sections:line_count("ignore_sections")-1

caches = {}
local caches_count = 0

local valid_item_list = nil
local valid_item_list_array = nil
local valid_map_spots = {
	["treasure"] = true,
	["treasure_player"] = true,
	["treasure_searched"] = true,
	["treasure_unique"] = true
}

-- Table to put things that you wish only the specific count can ever only spawn
-- This is loaded from a plugin now, add sections to coc_treasure_manager's plugin to fill this.
local always_in_existence = {}
------------------------------------------------------------------------------------------------------------------
--							PRIVATE
------------------------------------------------------------------------------------------------------------------
local function on_game_load()
	if (caches_count > 0) then
		return
	end
	local ignore_list = {
		["bar_inv_box"] = true,
		["bar_inventory_box_2"] = true,
		["val_recover_item_2_spawn"] = true
	}

	local sim = alife()
	for id, se_obj in alife():objects() do
		if (IsInvbox(se_obj) and not ignore_list[se_obj:name()]) then
			caches[se_obj.id] = false
			caches_count = caches_count + 1
		--elseif (se_obj:spawn_ini() and se_obj:spawn_ini():section_exist("drop_box")) then 
		--	box_caches[se_obj.id] = false
		--	box_caches_count = caches_count + 1
		end
	end

	for i=1, math.floor(caches_count/2) do
		create_random_stash(true,"stash")
	end
	
	local temp = {}
	for section,count in pairs(always_in_existence) do
		for i=1,count do
			iempty_table(temp)
			temp[1] = section
			create_random_stash(true,"stash",temp)
		end
	end

	if not (valid_item_list) then 
		valid_item_list,valid_item_list_array = get_valid_item_sections()
	end
end

local function actor_on_item_take_from_box(box,itm)
	if (caches[box:id()] == true) then
		-- Remove all existing map spots from the cache.
		-- Remember that this will only apply to randomly generated stashes.
		for k, v in pairs(valid_map_spots) do
			if level.map_has_object_spot(box:id(), k) then
				level.map_remove_object_spot(box:id(), k)
			end
		end

		-- Mark the stash as "partially looted".
		local id = alife_object(box:id()).id
		level.map_add_object_spot_ser(id, "treasure_searched", game.translate_string("st_ui_pda_secret_searched"))
		
		-- Remove the cache from the treasure manager.
		caches[box:id()] = false
		dxr_statistics.increment_statistic("stashes_found")
		news_manager.send_treasure(1)
	end
	
	-- If no items remain; remove the "partially looted" marker.
	if box:is_inv_box_empty() then
		if level.map_has_object_spot(box:id(), "treasure_searched") then
			level.map_remove_object_spot(box:id(), "treasure_searched")
		end
	end
	
end

local function save_state(data)
	--alun_utils.debug_write("coc_treasure_manager.save_state")
	if (caches_count <= 0) then
		return
	end

	if not (data.coc_treasure_manager) then
		data.coc_treasure_manager = {}
	end

	data.coc_treasure_manager.caches_count = caches_count
	data.coc_treasure_manager.caches = caches
end

local function load_state(data)
	if not (data.coc_treasure_manager) then
		return
	end

	caches_count = data.coc_treasure_manager.caches_count or caches_count
	caches = data.coc_treasure_manager.caches or caches

	data.coc_treasure_manager.caches_count = nil
	data.coc_treasure_manager.caches = nil
end

local function physic_object_on_use_callback(box,who)
	if (IsInvbox(box)) then
		try_spawn_treasure(box)
	end
end
------------------------------------------------------------------------------------------------------------------
--							ON GAME START
------------------------------------------------------------------------------------------------------------------
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("physic_object_on_use_callback",physic_object_on_use_callback)
end

-------------------------------------------------------------------------------------------------------------------

last_secret = nil
function create_random_stash(no_spot,hint,bonus_items, map_spot, delivery_id)
	local marauder_coeff = area_skills and area_skills.skills_table and area_skills.skills_table.marauder_skill and 1+area_skills.skills_table.marauder_skill/100 or 1
	map_spot = map_spot and valid_map_spots[map_spot] and map_spot or "treasure"
	
	last_secret = nil

	if (caches_count <= 0) and (delivery_id == nil) then
		return
	end

	last_secret = true
	
	local sim = alife()
	
	-- create a temporary table to use math.random
	local t = {}
	local size_t = 0
	for id,v in pairs(caches) do
		-- false means box is available
		if (v == false) then
			size_t = size_t + 1
			t[size_t] = id
		end
	end

	local index = size_t > 0 and math.random(size_t)
	if not (index) and (delivery_id == nil) then
		return
	end

	local id = t[index]
	local se_box = id and sim:object(id)
	if not (se_box) and (delivery_id == nil) then 
		caches[id] = nil
		caches_count = caches_count - 1
		return
	end

	if not (valid_item_list) then 
		valid_item_list,valid_item_list_array = get_valid_item_sections()
	end
	
	local spawned_item = bonus_items or {}
	local max_weight = math.random(80,130)
	
	if (dxr_achievements.has_achievement("rag_and_bone")) then
		max_weight = max_weight + 30
	end
	
	if delivery_id then max_weight = math.random(200,300) end
	local function is_consumable(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "S_FOOD" or v == "II_FOOD"
	end
	
	local function is_outfit(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "EQU_STLK" or v == "E_STLK" or v == "EQU_HLMET" or v == "E_HLMET"
	end
	
	local function is_weapon(section)
		local v = INI:r_string_ex(section,"class","")
		return string.find(v,"WP_") ~= nil
	end
	
	local function is_ammo(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "AMMO" or v == "AMMO_S"
	end
	
	local function is_backpack(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "EQ_BAKPK"
	end
	
	local function is_toolkit(section)
		return section == "itm_repairkit_tier_1" or section == "itm_repairkit_tier_2" or section == "itm_repairkit_tier_3"
	end
	
	local function is_artefact(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "SCRPTART"		
	end
	
	local function is_detector(section)
		local v = INI:r_string_ex(section,"class","")
		return v == "DET_ADVA" or v == "DET_ELIT" or v == "DET_SCIE" or v == "DET_SIMP"
	end

	--\\ FOR DEBUG
    local cost_lvls = {500,1000,3000,5000,9000,15000,25000}
    -- if (DEV_DEBUG_DEV) and not sorted then 
    -- -- iterate most expensive to least expensive by group.
        -- local tsortc,tsorto,tsortw,tsorta,tsorts,tsort = {},{},{},{},{},{}
        -- for section,cost in spairs(valid_item_list,function(t,a,b) return t[a] > t[b] end) do
            -- if is_consumable(section) then table.insert(tsortc, section.." = "..cost)
            -- elseif is_outfit(section) then table.insert(tsorto, section.." = "..cost)
            -- elseif is_weapon(section) then table.insert(tsortw, section.." = "..cost)
            -- elseif is_artefact(section) then table.insert(tsorta, section.." = "..cost)
            -- elseif is_ammo(section) then table.insert(tsorts, section.." = "..cost)
            -- else table.insert(tsort, section.." = "..cost)
            -- end
        -- end
        -- local cfg = io.open("valid_item_sort.ltx","w+")
        -- local function addgap(header, tname)
            -- local cost
            -- local lvl = 7
            -- cfg:write(header.."\n\n")
            -- for i=1,#tname do
                -- cost = tonumber(tname[i]:match("=%s(%d+)"))
                -- local once = nil
                -- while ((lvl >= 1) and cost < cost_lvls[lvl]) do
                    -- lvl = lvl - 1
                    -- once = true
                -- end
                -- if once then cfg:write("// "..cost_lvls[lvl+1].." //\n") end
                -- cfg:write(tname[i].."\n")
            -- end
        -- end
       
        -- addgap("### Outfits ###", tsorto)
        -- addgap("\n### Weapons ###", tsortw)
        -- addgap("\n### Consumables ###", tsortc)
        -- addgap("\n### Artifacts ###", tsorta)
        -- addgap("\n### Ammo ###", tsorts)
        -- addgap("\n### Other ###", tsort)
        -- cfg:close()
        -- sorted = true
    -- end
	--//
	
	local has_spawned = false
	local function try_spawn_item(sec,min,max,chance,weight)
		if (max_weight >= weight) then 
			local new_max = math.random(min,max)
			for i=1,new_max do
				if ((math.random(1,1000)/1000) <= chance) then 
					spawned_item[#spawned_item+1] = sec
					max_weight = max_weight - weight
					has_spawned = true
				end
			end
		end
	end
	
	local allow_item = true
	utils.shuffle(valid_item_list_array)
	for i,section in ipairs(valid_item_list_array) do
		local cost = valid_item_list[section]
		if not (always_in_existence[section]) then
			has_spawned = false
			local skip = false
			
			local bDetector = is_detector(section)
			local bToolkit = not bDetector and is_toolkit(section)
			local bArtefact = not bToolkit and is_artefact(section)
			local bWeapon = not bArtefact and is_weapon(section)
			local bOutfit = not bWeapon and is_outfit(section)
			local bBackpack = not bWeapon and not bOutfit and is_backpack(section)
			if (bWeapon or bOutfit or bBackpack or bArtefact) then
				if not (allow_item) then
					skip = true
				end
			end
			
			if not (skip) then
				if (bBackpack) then 
				if (section == "backpack_heavy") then
					try_spawn_item(section,1,1,0.03*marauder_coeff,80)
				elseif (section == "backpack_tourist") then 
					try_spawn_item(section,1,1,0.03*marauder_coeff,80)
				elseif (section == "backpack_specops") then
					try_spawn_item(section,1,1,0.05*marauder_coeff,80)
				elseif (section == "backpack_soviet") then
					try_spawn_item(section,1,1,0.05*marauder_coeff,80)
				elseif (section == "backpack_military") then
					try_spawn_item(section,1,1,0.05*marauder_coeff,80)
				elseif (section == "backpack_compact") then
					try_spawn_item(section,1,1,0.06*marauder_coeff,40)
				elseif (section == "backpack_small") then
					try_spawn_item(section,1,1,0.06*marauder_coeff,40)
				else
					try_spawn_item(section,1,1,0.10*marauder_coeff,50)
				end
				elseif (bDetector) then
					local v = INI:r_string_ex(section,"class","")
					if (v == "DET_SCIE") then
						try_spawn_item(section,1,1,0.005*marauder_coeff,80)
					elseif (v == "DET_ELIT") then 
						try_spawn_item(section,1,1,0.05*marauder_coeff,60)
					elseif (v == "DET_ADVA") then
						try_spawn_item(section,1,1,0.10*marauder_coeff,50)
					else 
						try_spawn_item(section,1,1,0.15*marauder_coeff,40)
					end
				elseif (bToolkit) then 
					if (section == "itm_repairkit_tier_3") then 
						try_spawn_item(section,1,1,0.04*marauder_coeff,80)
					elseif (section == "itm_repairkit_tier_2") then
						try_spawn_item(section,1,1,0.08*marauder_coeff,80)
					else
						try_spawn_item(section,1,1,0.12*marauder_coeff,50)
					end
				else
					-- decide for each section based on chance, weight and item classification
					if (cost <= cost_lvls[1]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,3,0.50*marauder_coeff,40)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.20*marauder_coeff,50)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.05*marauder_coeff,40)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.05*marauder_coeff,50)
						else
							try_spawn_item(section,1,1,0.40*marauder_coeff,40)
						end
					elseif (cost <= cost_lvls[2]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,2,0.20*marauder_coeff,50)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.10*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.04*marauder_coeff,40)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.05*marauder_coeff,60)
						else
							try_spawn_item(section,1,1,0.30*marauder_coeff,50)
						end
					elseif (cost <= cost_lvls[3]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.10*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.05*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.03*marauder_coeff,40)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.02*marauder_coeff,70)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,50)
						else 
							try_spawn_item(section,1,1,0.15*marauder_coeff,50)
						end
					elseif (cost <= cost_lvls[4]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.10*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.03*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,60)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,80)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,50)
						else 
							try_spawn_item(section,1,1,0.10*marauder_coeff,50)
						end
					elseif (cost <= cost_lvls[5]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.05*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,80)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,80)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,60)
						else 
							try_spawn_item(section,1,1,0.05*marauder_coeff,50)
						end
					elseif (cost <= cost_lvls[6]) then 
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.03*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,80)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.004*marauder_coeff,80)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.003*marauder_coeff,70)
						else 
							try_spawn_item(section,1,1,0.03*marauder_coeff,50)
						end
					elseif (cost <= cost_lvls[7]) then
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.01*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.003*marauder_coeff,90)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.003*marauder_coeff,80)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.001*marauder_coeff,80)
						else 
							try_spawn_item(section,1,1,0.01*marauder_coeff,50)
						end
					else
						if (is_consumable(section)) then
							try_spawn_item(section,1,1,0.005*marauder_coeff,60)
						elseif (is_ammo(section)) then
							try_spawn_item(section,1,1,0.003*marauder_coeff,60)
						elseif (bOutfit) then
							try_spawn_item(section,1,1,0.001*marauder_coeff,90)
						elseif (bWeapon) then
							try_spawn_item(section,1,1,0.001*marauder_coeff,80)
						elseif (bArtefact) then
							try_spawn_item(section,1,1,0.001*marauder_coeff,90)
						else 
							try_spawn_item(section,1,1,0.005*marauder_coeff,50)
						end
					end
				end
			end
			
			if (has_spawned) and (bWeapon or bOutfit or bBackpack or bArtefact) then
				if (allow_item) then 
					allow_item = false 
				end
			end
			
			if (max_weight <= 0) then
				break
			end
		end
	end
	
	if delivery_id then
		caches[delivery_id] = table.concat(spawned_item,",")
		--printf("cache %s",caches[delivery_id])
		return
	end
		
	if (#spawned_item > 0) then
		-- create map spot
		local ignore = nil
		for k, v in pairs(valid_map_spots) do
			if (level.map_has_object_spot(id,k) ~= 0) then
				ignore = true
			end
		end
		if (no_spot ~= true and not ignore) then
			-- Тайники из ЧН
			hint = stash_names(hint,id)
			level.map_add_object_spot_ser(id, map_spot or "treasure", hint or game.translate_string("st_ui_pda_secret"))
			news_manager.send_treasure(0)
		end
		caches[id] = table.concat(spawned_item,",")
	else
		caches[id] = false
	end
end


-- ////////////////////////////////////////////////////////////////////////////////////////////////
--
-- drx_create_random_stash function
--
-- ------------------------------------------------------------------------------------------------
--
--	Description:
--		- Creates a random stash
--
--	Usage:
--		drx_create_random_stash( no_spot, hint, bonus_items, bonus_lottery )
--
--	Parameters:
--		no_spot
--			-
--		hint
--			-
--		bonus_items
--			-
--		bonus_lottery
--			-
--
--	Return value (type: ):
--		ID of the stash
--
-- ------------------------------------------------------------------------------------------------
--	Modified by DoctorX
--	for DoctorX Questlines 1.6
--	Last modified October 20, 2016
-- ------------------------------------------------------------------------------------------------

-- Create random stash:
function drx_create_random_stash( no_spot, hint, bonus_items, bonus_lottery )

	last_secret = nil

	if (caches_count <= 0) then
		return
	end

	last_secret = true

	local sim = alife()

	-- Create a temporary table to use math.random:
	local t = {}
	for id, v in pairs(caches) do

		-- False means box is available:
		if (v == false) then
			local se_box = id and sim:object(id)
			if (simulation_objects.is_on_the_linked_level(alife():actor(), se_box)) then
				if (bonus_items) then
					if (se_box and se_box:clsid() == clsid.inventory_box_s) then
						table.insert(t,id)
					end
				else
					table.insert(t,id)
				end
			end
		end
	end

	local index = #t > 0 and math.random(#t)
	if not (index) then
		return
	end

	local id = t[index]
	local se_box = id and sim:object(id)
	if not (se_box) then
		caches[id] = nil
		caches_count = (caches_count - 1)
		return
	end

	if ( se_box:clsid( ) ~= clsid.inventory_box_s ) then
		if ( se_box:spawn_ini( ) and se_box:spawn_ini( ):section_exist( "drop_box" ) ) then
			-- Create map spot:
			if ( no_spot ~= true and level.map_has_object_spot( id, "treasure" ) == 0 ) then
				level.map_add_object_spot_ser( id, "treasure", hint or "" )
				news_manager.send_treasure( 0 )
			end

			-- Switch cache true, indicating it has treasure:
			caches[id] = true

			-- This is handled by xr_box.script:
			return
		else  -- invalid object
			caches[id] = nil
			caches_count = caches_count - 1
			return

		end
	end

	-- Switch cache true, indicating it has treasure:
	caches[id] = true

	-- Create map spot:
	if ( no_spot ~= true and level.map_has_object_spot( id, "treasure" ) == 0 ) then
		level.map_add_object_spot_ser( id, "treasure", hint or "" )
		news_manager.send_treasure( 0 )
	end

	math.random()
	math.random()
	math.random()

	local max_roll = math.random( 1, 6 )

	-- Setup possible loot table:
	local loot = {}

	-- Common:
	loot[1] = {}
	loot[2] = {}
	loot[3] = {}

	-- Fairly common:
	loot[4] = {}
	loot[5] = {}
	loot[6] = {}

	-- Uncommon:
	loot[7] = {}
	loot[8] = {}
	loot[9] = {}

	-- Rare:
	loot[10] = {}
	loot[11] = {}
	loot[12] = {}

	-- Extremely rare:
	loot[13] = {}
	loot[14] = {}
	loot[15] = {}

	local spawned_item = bonus_items or {}
	local max_weight = ( max_roll * math.random( 1, 100 ) / 25 )
	local lottery = 0

	repeat

		lottery = math.random( 0, 6 )
		if ( lottery == 6 ) then
			lottery = (lottery + math.random( 0, 3 ))
		end

		bonus_lottery = bonus_lottery or 0

		if ( has_alife_info( "achieved_rag_and_bone" ) ) then
			bonus_lottery = (bonus_lottery + math.random( 0, 2 ))
		end

		rnd = math.random( (max_roll + lottery) )
		rnd = (rnd + bonus_lottery)
		if ( rnd > 15 ) then
			rnd = 15
		end

		max_weight = (max_weight - (rnd + 1))

		table.insert( spawned_item, loot[rnd][math.random( #loot[rnd] )] )

		if ( (max_roll - 1) >= 1 ) then
			max_roll = (max_roll - 1)
		else
			max_roll = 1
		end

	until ( max_weight <= 0 )

	local sec, se_obj, data, ammos, ct, ammo_type, ammo_section

	local m_data = alife_storage_manager.get_state()
	if not(m_data.radiated_consumables) then 
		m_data.radiated_consumables = {}
	end
	local rads = 0
	
	for i = 1, #spawned_item do

		sec = spawned_item[i]
		if ( sec ~= "" and INI:section_exist( sec ) ) then
			if utils.is_consumable(sec) and (math.random() < 0.5) then
				sec, rads = radiate(sec)
			end
			se_obj = sim:create( sec, se_box.position, 0, 0, id )
			if (rads > 0) then
				m_data.radiated_consumables[se_obj.id] = rads
				rads = 0
			end
		else
			printf("drx_coc_treasure_manager.script: invalid section %s", sec)
		end
	end

	return id

end

function radiate(section)
	local section_rad = section:exclude("_radiated")
	local section_work = (section_rad ~= section) and section_rad or section
	local section_cut = string.sub(section,1,-3)
	local mass = INI:r_float_ex((INI:section_exist(section_cut) and section_cut or section_work),"inv_weight")
	local rads = utils.mean_random(1,math.floor(mass*1000),0,3)/4000
	return section_work.."_radiated", rads
end

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

function reveal_random_stash(map_spot,hint,bonus_items)
	-- create a temporary table to use math.random
	local t = {}
	local size_t = 0
	for id,v in pairs(caches) do
		if (type(v) == "string") then
			size_t = size_t + 1
			t[size_t] = id
		end
	end

	local index = size_t > 0 and math.random(size_t)
	if not (index) then
		return
	end
	
	local id = t[index]
	
	map_spot = valid_map_spots[map_spot] and map_spot or "treasure"
	-- create map spot
	local ignore = nil
	for k, v in pairs(valid_map_spots) do
		if (level.map_has_object_spot(id,k) ~= 0) then
			ignore = true
		end
	end	
	if not (ignore) then
		level.map_add_object_spot_ser(id, map_spot, hint and game.translate_string(hint) or game.translate_string("st_ui_pda_secret"))
		news_manager.send_treasure(0)
	end
	
	if (bonus_items and type(bonus_items) == "table") then
		caches[id] = caches[id] .. "," .. table.concat(bonus_items,",")
	end
end

function try_spawn_treasure(box, delivery_id)
	local id = box:id()
	
	--printf("try_spawn_treasure [%s]",caches[id])

	if not (caches[id]) and delivery_id and not (caches[delivery_id]) then 
		return 
	end 

	if not (type(caches[id]) == "string") and (delivery_id == nil) then 
		return
	end
	
	local spawned_item
	if delivery_id then
		spawned_item = caches[delivery_id]:to_table()
		caches[id] = nil
		caches[delivery_id] = nil
	else
		spawned_item = caches[id]:to_table()
		caches[id] = true
	end
	
	if not (valid_item_list) then 
		valid_item_list,valid_item_list_array = get_valid_item_sections()
	end

	local sec,ammos,ct,ammo_type
	local sim = alife()
	for i=1,#spawned_item do
		sec = spawned_item[i]
		if (valid_item_list[sec] and sec ~= "" and INI:section_exist(sec)) then
			if (utils.is_ammo(sec)) then 
				create_ammo(sec,box:position(),box:level_vertex_id(),box:game_vertex_id(),id,math.random(10,20))
			else
				-- since we spawning on parent, we don't want to register object or packetdata will be inaccurate
				if not INI:section_exist(sec) then
					error("the %s section does not exist", sec)
				else
					local se_obj = sim:create(sec, box:position(), 0, 0, id)
					if (se_obj) then
						local cls = se_obj:clsid()
						if (IsWeapon(nil,cls) and cls ~= clsid.wpn_knife_s) then
							se_obj.condition = (math.random(70)+30)/100
							local flags = se_obj:get_addon_flags()

							if (math.random() <= 0.3) then
								local sights = INI:r_list_ex(sec, "scopes", {})
								if #sights > 0 then
									local sight = sights[math.random(#sights)]
									if sight and INI:section_exist(sight) then
										if se_obj.scope_status == cse_alife_item_weapon.eAddonAttachable then
											sim:create(sight, box:position(), 0, 0, id)
										end
									end
								end
							end

							if (math.random() <= 0.3 and se_obj.grenade_launcher_status == cse_alife_item_weapon.eAddonAttachable) then
								flags:set(cse_alife_item_weapon.eWeaponAddonGrenadeLauncher,true)
							end
	
							if (math.random() <= 0.3 and se_obj.silencer_status == cse_alife_item_weapon.eAddonAttachable) then
								flags:set(cse_alife_item_weapon.eWeaponAddonSilencer,true)
							end
							-- Create random ammo type
							ammos = INI:r_list_ex(sec, "ammo_class", nil)
							ct = ammos and #ammos
							ammo_type = ammos and ct and math.random(0,ct-1) or 0
								
							se_obj:set_ammo_type(ammo_type)
						end
					end
				end
			end
		else
			printf("coc_treasure_manager.script: invalid section %s",sec)
		end
	end
end

function save(pk)
	if (USE_MARSHAL) then 
		return 
	end
	pk:w_u16(caches_count)
	for id,v in pairs(caches) do
		pk:w_u16(id)
		pk:w_bool(v)
	end
end

function load(pk)
	if (USE_MARSHAL) then 
		return 
	end
	caches_count = pk:r_u16()
	for i=1,caches_count do
		caches[pk:r_u16()] = pk:r_bool()
	end
end

function get_valid_item_sections()
	if valid_item_list then 
		return valid_item_list, valid_item_list_array
	end
	
	local t,tt = {},{}
	INI:section_for_each(function(section)
		if INI:line_exist(section, "cform") then
			if INI:r_bool_ex(section,"can_trade", true) and not INI:r_bool_ex(section,"quest_item", false) then
				if not section:is_contain("mp_") then
					local name = INI:r_string_ex(section, "inv_name", "")
					if (name and name ~= "" and name ~= "default") then
						local class = INI:r_string_ex(section, "class")
						if (class ~= "G_FAKE") then
							local cost = INI:r_float_ex(section, "cost", 0)
							if (cost > 0) then
								if section:is_contain("wpn_") then
									local num_ = section:find_matches("_")
									local result_wpn = false
									if num_ > 1 then
										for i = 0, count_weapon_valid_prefix do
											local result, id = valid_item_sections:r_line_ex("weapon_valid_prefix", i)
											if result then
												if section:is_contain(id) then
													if section:is_contain(string.add(tostring(id), "_")) then
														result_wpn = false
													else
														result_wpn = true
														break
													end
												else
													result_wpn = false
												end
											end
										end
						
										if not result_wpn then
											-- printf("!no weapon_valid_prefix %s", section)
											return false
										end
									end
								end
						
								for i = 0, count_ignore_sections do
									local result, id = valid_item_sections:r_line_ex("ignore_sections", i)
									if result then
										local ended_with = id:ended_with("_")
										if section == id or ended_with and section == id:sub(1, -2) or ended_with and section:match("("..id.."[%w_]*)") then
											return false
										end
									end
								end

								t[section] = cost
								table.insert(tt, section)
							end
						end
					end
				end
			end
		end
		return false
	end
	)
	
	-- List of all items in game that are not quest items
	-- if (DEV_DEBUG_DEV) then
		-- local cfg = io.open("valid_item_sections.ltx","w+")
		-- for k,v in pairs(t) do 
			-- cfg:write(k.."\n")
		-- end
		-- cfg:close()
	-- end
	return t,tt
end

function stash_names(hint,id)
	local sim = alife()
	local stash = sim:object(id)
	local stash_name = tostring(stash:name())
	if string.find(stash_name,"level_prefix") ~= nil then
	local level = sim:level_name(game_graph():vertex(stash.m_game_vertex_id):level_id())
	stash_name = string.gsub(stash_name,"level_prefix",level,1)
	end

	local name = "st_" .. stash_name .. "_name"
	local descr = "st_" .. stash_name .. "_descr"
	local new_name = game.translate_string(name)
	local new_descr = game.translate_string(descr)

	if new_name == name or descr == new_descr then
	return hint
	end

	stash_name = "%c[255,255,160,0]" .. new_name .. "\\n%c[default]" .. new_descr .. "\\n%c[160,100,100,200]" .. (hint or "")

	return stash_name
end