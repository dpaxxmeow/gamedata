-- Extensions to Game Options
-- IMPORTANT! SEE opt_menu_on_init to add a new game options (new as of 5/28/2016)

function opt_menu_on_init(menu)
	-- simply add new line and a ui_mm_<name> in ui_st_mm.xml to create a new option. Script automatically does the rest for you
  
	-- localization
	local localization_list = {}
	local display_list = {}
	local flist = getFS():file_list_open("$game_text$",bit_or(FS.FS_ListFolders,FS.FS_RootOnly))
	local f_cnt = flist:Size()
	for	it=0, f_cnt-1 do
		localization_list[#localization_list+1] = flist:GetAt(it):sub(1,-2)
		display_list[#localization_list] = "st_" ..localization_list[#localization_list]
	end
	menu.gameplay_options["localization"] = {default = "st_eng", debug_only = false, typ = "list", list = display_list, --localization_list,
		on_accept=function(handler,optMgr,ctrl)
		local language = localization_list[ctrl:GetCurrentIdx()+1] --ctrl:GetText()
		if (language and language ~= "") then
			local loc_ini = ini_file_ex("localization.ltx",true)
			if (loc_ini:r_value("string_table","language") ~= language) then
				loc_ini:w_value("string_table","language",language)
				loc_ini:save()
				--menu.b__require_restart = true
				reload_system_ini()
				game.reload_language()
			end
		end
	end}
	
	if string.find(command_line(), "-dev") then
		-- debug_hud
		menu.gameplay_options["debug_hud"] = {default=false, debug_only=true, typ="check", on_accept=function(handler,optMgr,ctrl)
			if (level.present() and xrs_debug_tools) then
				if (ctrl:GetCheck()) then
					xrs_debug_tools.activate_feature()
				else 
					xrs_debug_tools.deactivate_feature()
				end
			end
		end}
		
		-- debug_hud_map
		menu.gameplay_options["debug_map_hud"]	= {default=false, debug_only=true, typ="check",
			on_accept=function(handler,optMgr,ctrl)
				if (level.present() and ui_map_debug_ex) then
					if (ctrl:GetCheck()) then
						ui_map_debug_ex.activate_feature()
					else 
						ui_map_debug_ex.deactivate_feature()
					end
				end
			end
		}
	end
	-- slot Hud
	if (slot_hud) then
		menu.gameplay_options["slot_hud"]	= {default=true, debug_only=false, typ="check", on_accept=function(handler,optMgr,ctrl)
			if (level.present() and slot_hud) then
				if (ctrl:GetCheck()) then
					slot_hud.activate_hud()
				else
					slot_hud.deactivate_hud()
				end
			end
		end}
	end
	
	-- Hardcore AI Aim
	menu.gameplay_options["hardcore_ai_aim"] = {default=true, debug_only=false, typ="check", on_accept=function(handler,optMgr,ctrl)
		local con = get_console()
		if (ctrl:GetCheck()) then
			con:execute("ai_aim_min_speed 0.001")
			con:execute("ai_aim_min_angle 0.00012")
			con:execute("ai_aim_max_angle 0.001")
			con:execute("ai_aim_predict_time 0.00001")
		else
			con:execute("ai_aim_min_speed 0.01")
			con:execute("ai_aim_min_angle 0.00012")
			con:execute("ai_aim_max_angle 0.001")
			con:execute("ai_aim_predict_time 0.0001")
		end
	end}
	-- show goodwill changes in messages
	menu.gameplay_options["show_goodwill_msg"] = {default=true,  debug_only=false, 	typ="check"}
	-- fast_travel
	--menu.gameplay_options["fast_travel_option"] = {default=false,  debug_only=false, 	typ="check"}	 
	-- weapon loot
	menu.gameplay_options["rank_loot_option"] = {default=true,  debug_only=false, 	typ="check"}
	-- open all transitions
	-- menu.gameplay_options["transitions_switch"]	= {default=false, 	debug_only=false, 	typ="check"}	
	-- show_enemy_health
	-- menu.gameplay_options["show_enemy_health"]	= {default=false, 	debug_only=false, 	typ="check"}
	-- Flies over corpses, number of playing particles, 0 disable function
	menu.gameplay_options["effect_flies_num"]	= {default=20,		debug_only=false,	typ="list", list={0,5,10,15,20,25,30,35,40,45,50}}
	--	Switching the camera when interacting with environment.
	menu.gameplay_options["switch_camera"]		= {default=false, 	debug_only=false, 	typ="check"}
	-- radio_mod
	menu.gameplay_options["radio_mod"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- mechanic_feature
	menu.gameplay_options["mechanic_feature"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_engine_sound
	menu.gameplay_options["heli_engine_sound"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_spawn
	--menu.gameplay_options["heli_spawn"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- Show mask hud
	menu.gameplay_options["mask_hud"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- Mask rain drops
	menu.gameplay_options["hud_rain_drops"]		= {default=true, 	debug_only=false, 	typ="check"}
	menu.gameplay_options["hud_jitter"]			= {default=true, 	debug_only=false, 	typ="check"}
	menu.gameplay_options["hud_wiggle"]			= {default=true, 	debug_only=false, 	typ="check"}
	menu.gameplay_options["hud_zoom"]		    = {default=0,		debug_only=false,	typ="list", list={0,2,4,6,8,10,12,14,16,18,20,22,24,26}}
	-- weapons heat effect
	menu.gameplay_options["weapon_heat"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and weapon_heat) then
			if (ctrl:GetCheck()) then
				weapon_heat.get_heat()
			else
				weapon_heat.stop_heat()
			end
		end
	end}
	menu.gameplay_options["weapon_heat_ui"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and weapon_heat) then
			weapon_heat.UI_BAR = ctrl:GetCheck()
		end
	end}
	-- 	Health progressbar switch
	menu.gameplay_options["health_progressbar"]	= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and weapon_heat) then
			ActorMenu.get_actor_menu():HealthProgressUI(ctrl:GetCheck())
		end
	end}
	-- saving only with campfire
	menu.gameplay_options["only_campfire"]		= {default=true, 	debug_only=false, 	typ="check"}
	-- enable extra animations
	--menu.gameplay_options["extra_animations"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- outfit drop
	menu.gameplay_options["outfit_drop"]		= {default=true, 	debug_only=false, 	typ="check"}
	menu.gameplay_options["outfit_real_condition"] = {default=true, 	debug_only=false, 	typ="check"}
	-- dynamic_news
	menu.gameplay_options["dynamic_news"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and dynamic_news_manager) then 
			if (ctrl:GetCheck()) then 
				dynamic_news_manager.get_dynamic_news()
			else
				dynamic_news_manager.destroy_dynamic_news()
			end
		end	
	end}
	-- Simplified items pickup
	menu.gameplay_options["cod_pickup_mode"]	= {default=false, 	debug_only=false, 	typ="check"}
	-- Pickup info
	menu.gameplay_options["pickup_info"]		= {default=false, 	debug_only=false, 	typ="check"}
	-- sleep_deprived
	-- menu.gameplay_options["sleep_deprived"] = {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		-- if (level.present() and sleep_dep) then
			-- if (ctrl:GetCheck()) then
				-- sleep_dep.activate_feature()
			-- else 
				-- sleep_dep.deactivate_feature()
			-- end
		-- end
	-- end}
	-- art_degradation
	menu.gameplay_options["art_degrade"] = {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and artefact_degradation) then
			artefact_degradation.activate_feature(ctrl:GetCheck())
		end
	end}
	-- crosshair type
	menu.gameplay_options["crosshair"] = {default="ui_mm_crosshair_collide", debug_only=false, typ="list",list={"ui_mm_crosshair_collide","ui_mm_crosshair_inert","ui_mm_crosshair_locked"}, on_accept=function(handler,optMgr,ctrl)
		local ctype = axr_main.config:r_value("mm_options","crosshair",0,"1")
		if ctype == "ui_mm_crosshair_collide" then 
			get_console():execute("hud_crosshair_collide on")
			get_console():execute("hud_crosshair_inert off")
		elseif ctype == "ui_mm_crosshair_inert" then 
			get_console():execute("hud_crosshair_collide off")
			get_console():execute("hud_crosshair_inert on")
		elseif ctype == "ui_mm_crosshair_locked" then 
			get_console():execute("hud_crosshair_collide off")
			get_console():execute("hud_crosshair_inert off")
		end
	end}

	-- I do not recommend allowing a factor greater than 1.0 because there are not enough smart terrain jobs
	menu.gameplay_options["alife_mutant_pop"]			= {default=1.0, 	debug_only=false,	typ="list", list={0.25,0.50,0.75,1.0}}
	menu.gameplay_options["alife_stalker_pop"]			= {default=0.5, 	debug_only=false,	typ="list", list={0.25,0.50,0.75,1.0}}
	menu.gameplay_options["alife_release_items"]		= {default=72,		debug_only=false,	typ="list", list={0,1,2,4,8,12,24,36,48,72,96}}
	menu.gameplay_options["alife_body_count_max"]		= {default=10,		debug_only=false,	typ="list", list={2,3,5,10,15,20}}
    menu.gameplay_options["alife_body_stay_time"]		= {default=48,		debug_only=false,	typ="list", list={1,3,6,12,24,48,72,96}}
    menu.gameplay_options["alife_body_rel_min_dist"]    = {default=150,		debug_only=false,	typ="list", list={50,100,150,200}}
	menu.gameplay_options["alife_switch_distance"]		= {default=300,		debug_only=false,	typ="list", list={150,200,250,300,350,400,450,500}}
	
	-- excl_dist
	-- Note: Shouldn't be greater than switch distance or no simulation squads will come online. Instead it should create a border zone between excl_dist and switch_distance where stuff can come online
	-- so that when actor walks stuff will naturally come online but if squad teleports very close to actor it will stay offline until player walks far enough away.
	menu.gameplay_options["excl_dist"]					= {default=25, 		debug_only=false, 	typ="list", list={0,25,50,75,100,125}}
	-- Head bobbing
	menu.gameplay_options["head_bobbing"] 				= {default=1.0, 	debug_only=false, 	typ="list", list={0,0.25,0.50,0.75,1.0,1.25,1.5,1.75,2}, on_accept=function(handler,optMgr,ctrl)
		local hb = axr_main.config:r_value("mm_options","head_bobbing",0,1.0)
		if hb then 
			get_console():execute("head_bobbing ".. hb)
		end
	end}
	
	-- number of rotating quicksaves
	menu.gameplay_options["quicksave_cnt"]				= {default=5, 		debug_only=false, 	typ="list", list={1,3,5,8,10,15,20}}
	-- character portraits
	if (db.actor) then -- Options will only show while in-game
	
		local l = get_character_icon_list()
		local selected = nil 
		
		menu.gameplay_options["char_portrait"]			= {default=db.actor_binder.character_icon or "ui_inGame2_Strelok", debug_only=false, typ="list", list=l, on_accept=function(handler,optMgr,ctrl)
			if (selected) then
				db.actor_binder.character_icon = ctrl:GetText()
				if (axr_main.config:r_value("mm_options","enable_outfit_portrait",1,false)) then
					local outfit = db.actor:item_in_slot(7)
					if (outfit == nil) then
						db.actor:set_character_icon(db.actor_binder.character_icon)
					end
				else 
					db.actor:set_character_icon(db.actor_binder.character_icon)
				end
			end
		end, 
		on_list_item_select=function(handler,ctrl)
			selected = l[ctrl:GetCurrentIdx()+1]--ctrl:GetText()
			if (handler.char_icon) then
				handler.char_icon:InitTexture(selected)
			end
		end}
		
		menu.gameplay_options["outfit_portrait"] = {default=false, debug_only=false, typ="check", on_accept=function(handler,optMgr,ctrl)
			if (ctrl:GetCheck()) then
				local outfit = db.actor:item_in_slot(7)
				if (outfit) then 
					local icon = system_ini():r_string_ex(outfit:section(),"character_portrait")
					if (icon) then 
						db.actor:set_character_icon(icon)
					end
				end
			else 
				db.actor:set_character_icon(db.actor_binder.character_icon or "ui_inGame2_Strelok")
			end
		end}
	end
	
	write_default_config(menu.gameplay_options)
end

function opt_menu_on_accept(menu,optMgr,console)
	on_accept(menu.gameplay_options,menu,optMgr,console)
end

function opt_menu_on_set_values(menu,optMgr)
	on_set_values(menu.gameplay_options,menu,optMgr)
end

function write_default_config(tab_table)
	local need_save = false
    for k,v in pairs(tab_table) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				if not (axr_main.config:line_exist("mm_options","enable_"..k)) then
					axr_main.config:w_value("mm_options","enable_"..k,v.default)
					need_save = true
				end
			elseif not (axr_main.config:line_exist("mm_options",k)) then
				axr_main.config:w_value("mm_options",k,v.default)
				need_save = true
			end
		end
    end
	if (need_save) then 
		axr_main.config:save()
	end
end

function on_accept(tab_table,menu,optMgr,console)
    for name,v in pairs(tab_table) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				axr_main.config:w_value("mm_options","enable_"..name,v.ctrl:GetCheck())
			elseif (v.typ=="list") then 
				if (type(v.default) == "boolean") then
					axr_main.config:w_value("mm_options",name,v.ctrl:GetText()=="true" or false)
				elseif (type(v.default) == "number") then 
					axr_main.config:w_value("mm_options",name,tonumber(v.ctrl:GetText()) or v.default)
				else 
					local value = v.list[v.ctrl:GetCurrentIdx()+1]
					axr_main.config:w_value("mm_options",name,value)
				end
			end
			
			if (v.on_accept) then 
				v.on_accept(menu,optMgr,v.ctrl)
			end
		end
    end
    axr_main.config:save()
end

function on_set_values(tab_table,menu,optMgr)
    for name,v in pairs(tab_table) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				v.ctrl:SetCheck(axr_main.config:r_value("mm_options","enable_"..name,1,v.default))
			elseif (v.typ=="list") then
				-- so proper type is cached when reading
				if (type(v.default) == "boolean") then
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,1,v.default))
				elseif (type(v.default) == "number") then 
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,2,v.default))
				else 
					v.ctrl:SetText(game.translate_string(axr_main.config:r_value("mm_options",name,0,v.default)))
				end
			end
			if (v.on_set_values) then 
				v.on_set_values(menu,optMgr,v.ctrl)
			end
		end
    end
end

function get_character_icon_list()
	local t = {"ui_inGame2_Strelok"}
	local faction = character_community(db.actor):sub(7)
	local ini = ini_file("plugins\\player_portraits.ltx")
	local section = faction.."_portraits"
	local n = ini:section_exist(section) and ini:line_count(section) or 0
	local result, id, value = nil,nil,nil
	for i=0, n-1 do
		result, id, value = ini:r_line(section,i,"","" )
		t[#t+1] = id
	end
	return t
end