-- Register the on_key_release callback when the game starts
function on_game_start()
    RegisterScriptCallback("on_key_release", on_key_release)
end

-- Drop backpack when the specified key is released
function on_key_release(key)
    if (dik_to_bind(key) == key_bindings.kCUSTOM7) then 
        local backpack = db.actor:item_in_slot(13)
        if not (backpack) then return end
        db.actor:drop_item(backpack)
    end
end

-- Handle the player taking items from the stash
function actor_on_item_take_from_box(box, obj)
    local id, hud = box:id(), get_hud()
    local m_data = alife_storage_manager.get_state()
    -- Check if the box is a player-created stash
    if (m_data.player_created_stashes and m_data.player_created_stashes[id]) then 
        -- If the box is empty, remove the stash
        if (box:is_inv_box_empty()) then
            if (hud) then hud:HideActorMenu() end
            level.map_remove_object_spot(id, "treasure_player")
            alife():release(alife_object(id), true)
            local section = m_data.player_created_stashes[id]
            alife():create(section, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
            m_data.player_created_stashes[id] = nil
        end
    end
end

-- Return the appropriate string for creating a stash
function query_create_stash(obj)
    if (obj:clsid() == clsid.equ_backpack) then return game.translate_string("ui_st_create_stash") end
end 

-- Show the stash creation UI
function action_create_stash(obj)
    get_hud():HideActorMenu()
    local ui = actor_backpack_ui(obj)
    if (ui) then ui:ShowDialog(true) end
end

-- Check if the item is ammo for any equipped weapon
function is_ammo_for_wpn(sec)
    for i = 1, 3 do
        local wpn = db.actor:item_in_slot(i)
        if (wpn) then
            local ammos = alun_utils.parse_list(INI, wpn:section(), "ammo_class", true)
            if (ammos[sec]) then return true end
        end
    end
    return false
end

-- Check if the item is in any of the actor's slots
function is_in_slot(obj)
    for i = 1, 12 do
        local item = db.actor:item_in_slot(i)
        if (item and item:id() == obj:id()) then return true end
    end
    return false
end

-----------------
-- UI 
-----------------
class "actor_backpack_ui" (CUIScriptWnd)

-- Initialize the UI class
function actor_backpack_ui:__init(backpack)
    super()
    self:InitControls()
    self:InitCallBacks()
    self.backpack = backpack
    self.section = backpack:section()
end

function actor_backpack_ui:__finalize() end

-- Initialize the UI controls
function actor_backpack_ui:InitControls()
    self:SetWndRect(Frect():set(0, 0, 1024, 768))
    if (device().width / device().height > (1024 / 768 + 0.01)) then wide = true end
    self:SetAutoDelete(true)
    self:Enable(true)

    local xml = CScriptXmlInit()
    xml:ParseFile("ui_itm_main.xml")
    self.back = xml:InitStatic("itm_backpack:background", self)
    self.input = xml:InitEditBox("itm_backpack:input", self)
    self:Register(self.input, "fld_input")
    local btn = xml:Init3tButton("itm_backpack:btn_cancel", self.back)
    self:Register(btn, "btn_cancel")
    btn = xml:Init3tButton("itm_backpack:btn_ok", self.back)
    self:Register(btn, "btn_ok")
end

-- Update the UI
function actor_backpack_ui:Update()
    CUIScriptWnd.Update(self)
end

-- Initialize UI callbacks
function actor_backpack_ui:InitCallBacks()
    self:AddCallback("btn_ok", ui_events.BUTTON_CLICKED, self.OnAccept, self)
    self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnCancel, self)
end

-- Handle the "OK" button click, create a new stash
function actor_backpack_ui:OnAccept()
    local sec = string.add("inv", (self.section:match("(backpack_[%w_]*)") or ""))
    local se_obj = sec and alife():create(string.add("inv_", sec), db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
    if (se_obj) then
        local txt = self.input:GetText()
        txt = txt ~= "" and txt or strformat(game.translate_string("st_itm_stash_of_character"), db.actor:character_name())
        level.map_add_object_spot_ser(se_obj.id, "treasure_player", txt)
        SetHudMsg(game.translate_string("st_stash_created"), 4)

        local m_data = alife_storage_manager.get_state()
        if not (m_data.player_created_stashes) then 
            m_data.player_created_stashes = {}
        end

        m_data.player_created_stashes[se_obj.id] = self.section

        local se_backpack = alife_object(self.id)
        if (se_backpack) then
            alife():release(se_backpack, true)
        end
    end
    self:HideDialog()
end

-- Handle the "Cancel" button click, close the dialog
function actor_backpack_ui:OnCancel()
    self:HideDialog()
end