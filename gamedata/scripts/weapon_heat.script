--=================================================================
--		Weapon Overheating created by Nuor 6-1-2011
--		Changed for A.R.E.A. by Surs 26.10.2018 
--		Version 1.05 from 28.12.2021 by [Nuor]
--=================================================================
local wpn_attr_table,default_ammo_heat,default_ammo_wear,display_bar,disp_inv_bar,display_icon,smk_lvl
local heat_active, cool_active
local active_wpn_id,weap_table,smoke_tbl
feature_is_active,UI_BAR = nil,nil
new_wpn_id,del_wpn_id = nil,nil
local _debug = false
--/ ---------------------------------------------------------------
function get_heat()	--start feature intialize values
	if (feature_is_active) then
		return 
	end
	feature_is_active = true
	
    wpn_attr_table = {  --//add these to weapon section in ltx for custom heating (ex. heating_rates = nato2)
		default = {cool_rate = 0.0004, heat_rate = 0.0010, heat_dec_fac = 0.0007},
		ak1		= {cool_rate = 0.0006, heat_rate = 0.0012, heat_dec_fac = 0.0006},
		ak2		= {cool_rate = 0.0006, heat_rate = 0.0010, heat_dec_fac = 0.0006},
		ak3		= {cool_rate = 0.0007, heat_rate = 0.0009, heat_dec_fac = 0.0006},
		nato1	= {cool_rate = 0.0007, heat_rate = 0.0013, heat_dec_fac = 0.0006},
		nato2	= {cool_rate = 0.0007, heat_rate = 0.0010, heat_dec_fac = 0.0006},
		nato3	= {cool_rate = 0.0008, heat_rate = 0.0008, heat_dec_fac = 0.0006},
		pistol1	= {cool_rate = 0.0012, heat_rate = 0.0020, heat_dec_fac = 0.0003},
		pistol2	= {cool_rate = 0.0012, heat_rate = 0.0018, heat_dec_fac = 0.0003},
		pistol3	= {cool_rate = 0.0013, heat_rate = 0.0015, heat_dec_fac = 0.0003},
		smg1	= {cool_rate = 0.0007, heat_rate = 0.0013, heat_dec_fac = 0.0002},
		smg2	= {cool_rate = 0.0008, heat_rate = 0.0012, heat_dec_fac = 0.0002},
		smg3	= {cool_rate = 0.0009, heat_rate = 0.0012, heat_dec_fac = 0.0002},
		sniper1 = {cool_rate = 0.0007, heat_rate = 0.0020, heat_dec_fac = 0.0007},
		sniper2 = {cool_rate = 0.0010, heat_rate = 0.0020, heat_dec_fac = 0.0007},
		sniper3 = {cool_rate = 0.0012, heat_rate = 0.0020, heat_dec_fac = 0.0007},
		mgun	= {cool_rate = 0.0005, heat_rate = 0.0006, heat_dec_fac = 0.0006},
		gauss	= {cool_rate = 0.0050, heat_rate = 0.0200, heat_dec_fac = 0.0006}}

	default_ammo_heat = 1.0	-- default heating factor ammo type - add to ammo section (ex. heating_factor = 1.1)
	default_ammo_wear = 1.0	-- default wear factor ammo type 	- add to ammo section (ex. wear_factor = 1.1)
--/ -----------------------------------------------------------
	display_bar, disp_inv_bar, display_icon = 5, 1, 10	-- % that trigger heating bar and icon on hud/inv
	smk_lvl = 15										-- % increments that increase smoke
	UI_BAR = axr_main.config:r_value("mm_options","enable_weapon_heat_ui",1,true)
	cool_cyc = 1000				-- milliseconds between cooling checks
	smoke_tbl = {}
--/	------------------------------------------------------------
	if (USE_MARSHAL) then
		RegisterScriptCallback("save_state",save_state)
		RegisterScriptCallback("load_state",load_state)
	end
	RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("actor_on_wpn_state",on_wpn_state)
	OpenHud()
end

function OpenHud()
	if db.actor then
		weap_table = weap_table or alife_storage_manager.get_state().weap_table or {}
		db.actor.heat_ui = heat_ui(get_hud())
	end
end

function reinit_hud()
	if db.actor and db.actor.heat_ui then
		--weap_table = weap_table or alife_storage_manager.get_state().weap_table or {}
		--heat_active = heat_active or alife_storage_manager.get_state().heat_active or {}
		--active_wpn_id = alife_storage_manager.get_state().active_wpn_id
		db.actor.heat_ui:InitControls()
		if UI_BAR then db.actor.heat_ui:show() end
	end
end

function CloseHud(clean)
	if db.actor and db.actor.heat_ui then
		if weapon_table then
			alife_storage_manager.get_state().weap_table = weap_table
			--alife_storage_manager.get_state().heat_active = heat_active
			--alife_storage_manager.get_state().active_wpn_id = active_wpn_id
		end
		db.actor.heat_ui:__finalize()
	end
	if clean and weapon_table then	--clear weapon table
		for w_id,v in pairs (weap_table) do --remove heat reset real condition
			local wpn = level.object_by_id(w_id)
			if wpn then
				wpn:set_condition(v.real)
			else
				local s_obj = alife_object(w_id)
				local t = s_obj and stpk_utils.get_object_data(s_obj)
				if t then
					t.condition = v.real
					stpk_utils.set_object_data(t,s_obj)
				end
			end
			weap_table[w_id] = nil
		end
		weap_table = nil
	end
end
	
function stop_heat()	--disable feature
	if not (feature_is_active) then
		return 
	end
	feature_is_active = false
	
	CloseHud(true)
	active_wpn_id = nil
	heat_active = nil
	smoke_tbl = nil
	UI_BAR = nil

	if (USE_MARSHAL) then
		UnregisterScriptCallback("save_state",save_state)
		UnregisterScriptCallback("load_state",load_state)
	end
	UnregisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
	UnregisterScriptCallback("actor_on_before_death",actor_on_before_death)
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	alife_storage_manager.get_state().weap_table = nil
end

--/ -------------------------------------------------------------

local function opt_menu_on_init(menu)
	-- weapon overheating
	menu.gameplay_options["weapon_heat"]		= {default=false, 	debug_only=false, 	typ="check",
		on_accept=function(handler,optMgr,ctrl)
			if (level.present()) then
				if (ctrl:GetCheck()) then
					get_heat()
				else
					stop_heat()
				end
			end
		end
	}
	menu.gameplay_options["weapon_heat_ui"]	= {default=true, 	debug_only=false, 	typ="check",
		on_accept=function(handler,optMgr,ctrl)
			if (level.present()) then
				UI_BAR = ctrl:GetCheck()
			end
		end
	}
end

function on_game_start()
	RegisterScriptCallback("opt_menu_on_init",opt_menu_on_init)
	if (axr_main.config:r_value("mm_options","enable_weapon_heat",1,false) == false) then return end
	local function actor_on_first_update()
		get_heat()
	end
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function actor_on_before_death()
	CloseHud()
end

function actor_on_net_destroy()
	CloseHud(true)
end

--/ ============================================================
--/ ====================   Marshal Storage  ====================
function save_state(m_data)
	m_data.weap_table = weap_table and table.size(weap_table) > 0 and weap_table or nil
end

function load_state(m_data)
	weap_table = m_data.weap_table or weap_table or {}
end

--/ ==========================================================
function actor_on_weapon_fired(actor,wpn,ammo_elapsed)
	active_wpn_id = wpn:id()
	if active_wpn_id and wpn:condition() ~= 0 then
		if not heat_active then heat_active = {} end
		heat_active[active_wpn_id] = true
		local temp = 0
		if weap_table[active_wpn_id] == nil then
			if _debug then printf("weapon_heat:actor_on_weapon_fired:fill::before [%s] active:%s",active_wpn_id,heat_active[active_wpn_id]) end
			temp = fill_tbl(wpn)
			if _debug then printf("weapon_heat:actor_on_weapon_fired:fill::[%s] heating:%s active:%s",active_wpn_id, temp,heat_active[active_wpn_id]) end
		else
			if _debug then printf("weapon_heat:actor_on_weapon_fired::before[%s] active:%s",active_wpn_id,heat_active[active_wpn_id]) end
			temp = heating(wpn)
			if _debug then printf("weapon_heat:actor_on_weapon_fired::[%s] heating:%s active:%s",active_wpn_id, temp,heat_active[active_wpn_id]) end
		end
		barrel_explosion(active_wpn_id,wpn)
	end
end

function on_wpn_state(wpn, old_state, new_state)
	--we will prohibit shooting if the weapon is broken
	if not wpn or TableAnimHands().AnmCheck(wpn) or IsKnife(wpn) then return end
	if wpn:condition() == 0 and new_state == 5 then
		wpn:switch_state(8)
	end
end

function barrel_explosion(id,wpn)
	local wpn_section = wpn:section()
	local probability_explosion = 5 --maximum chance of barrel explosion 5%
	local condition_status = 0.85 --the barrel can explode if damaged by 0.7
	local critical_condition = 1-wpn:condition()
	math.randomseed(time_global())
	if condition_status < critical_condition and math.ceil(probability_explosion*critical_condition) > math.random(0,100) then
		local impulse = INI:r_float_ex(wpn_section, "hit_impulse", 10)*critical_condition
		local ammo_type = weapon_effects.get_ammo_type_ex(wpn)
		local hit_actor = INI:r_float_ex(ammo_type, "hit_power", 1)*critical_condition
		local bones_list = {
			"bip01_r_hand","bip01_l_hand","bip01_body","bip01_head"
		}
		bones_list = bones_list[math.random(#bones_list)]
		local explode_vec = vector():set(db.actor:position()):sub(wpn:position())
		local explode = hit()
		explode.direction = explode_vec
		explode.draftsman = db.actor
		explode.impulse = impulse
		explode.power = hit_actor
		explode:bone(bones_list)
		explode.type = hit.explosion
		db.actor:hit(explode)
		wpn:set_condition(0)
		weap_table[id].real = 0
		CreateSound("weapons\\weapon_heli"):position_add(function(position)
			local dir = device().cam_dir
			dir.x = dir.x*3
			dir.y = dir.y*3
			dir.z = dir.z*3
			local new_position = wpn:position()
			new_position:add(dir)
			return new_position
		end,"update"):play_at_pos(wpn, wpn:position(),0,sound_object.s3d)
	end
end

function fill_tbl(wpn)
	if _debug then printf("fill_tbl::name:%s[%s]",wpn and wpn:section() or "nil",active_wpn_id) end
	local active_section = wpn:section()
	local h_tbl = wpn_attr_table[INI:r_string_ex(active_section,"heating_rates") or "default"] 	--section "heating_rates = " from table above 
	h_tbl.heat_rate = INI:r_float_ex(active_section,"heating") or h_tbl.heat_rate 				--section custom "heating =" rate
	h_tbl.cool_rate = INI:r_float_ex(active_section,"cooling") or h_tbl.cool_rate  				--section custom "cooling =" rate
	h_tbl.heat_dec_fac = INI:r_float_ex(active_section,"heat_damage") or h_tbl.heat_dec_fac  	--section custom "heat_damage =" rate
	
	local cond_loss = INI:r_float_ex(active_section,"condition_shot_dec",0.0001)
	local function itr(upgrade, decline)
		local upgrade_section = INI:r_string_ex(upgrade, "section")
		if upgrade_section and INI:line_exist(upgrade_section, "condition_shot_dec") then
			cond_loss = cond_loss + INI:r_float_ex(upgrade_section, "condition_shot_dec", 0.0)
		end
	end
	wpn:iterate_installed_upgrades(itr,wpn)
	
	local real_cond = wpn:condition() - cond_loss -- you could force additional condition loss on first shot
	local temp_cond = real_cond - h_tbl.heat_rate
	wpn:set_condition(temp_cond)
	local hud = INI:r_string_ex(active_section,"hud")

	if _debug then printf("fill_tbl::[%s] cond:%s heat_cond:%s",active_wpn_id,real_cond,temp_cond) end
	weap_table[active_wpn_id] = {
		loss = cond_loss,
		real = real_cond,
		cond = temp_cond,
		heat = h_tbl.heat_rate,
		cool = h_tbl.cool_rate,
		hdf = h_tbl.heat_dec_fac,
--//----------------------  smoking weapon	---------------------------------
		bone = INI:r_string_ex(hud,"fire_bone") or "wpn_body",
		offset = INI:r_string_ex(hud,"fire_point") or ""
		}
	heat_active[active_wpn_id] = nil
	db.actor.heat_ui:show()
	return (real_cond - temp_cond)/real_cond
end

function heating(wpn)
	if _debug then printf("heating:: heat:name:%s[%s]",wpn and wpn:section() or "nil",active_wpn_id) end
	local w_data = wpn and active_wpn_id and weap_table[active_wpn_id]
	if not w_data then return end
	local ammo_heat, ammo_wear = ammo_factors(wpn)								-- ammo modifiers
	local cond = wpn:condition() 
	local heat = (w_data.real - w_data.cond)/w_data.real * ammo_heat			-- condition decline from heat
	local h_dec = math.pow(heat,3)*w_data.hdf*ammo_wear*math.sqrt(w_data.real) 	-- decline slows as condition decreases/accelerates as heat increases
	if _debug then printf("heating:: heat:%s real:%s heated:%s[%s] loss:%s h_dec:%s",heat,w_data.real,w_data.cond,cond,w_data.loss,h_dec) end
	local delta_test = h_dec + (w_data.cond - cond)*1.0
	local delta = h_dec + w_data.loss
	if _debug then printf("heating::before real:%s delta:%s[%s]", w_data.real,delta,delta_test) end
	--if delta < 0 then
	--	delta = 0
	--end
	w_data.real = math.clamp(w_data.real-delta, 0, 1.0)						-- real condition after decline
	if _debug then printf("heating::after real:%s delta:%s", w_data.real,delta) end
    w_data.cond = w_data.cond - w_data.heat - h_dec								-- temporary condition before cooling
	wpn:set_condition(w_data.cond)												-- set temporary condition
    weap_table[active_wpn_id] = w_data
	heat_active[active_wpn_id] = nil
	if heat > 0 then db.actor.heat_ui:show() end
	return heat
end

function ammo_factors(wpn)
	local at_tbl = wpn and INI:r_list_ex(wpn:section(),"ammo_class", {})
	local at = at_tbl and at_tbl[wpn:get_ammo_type()+1]
	return INI:r_string_ex(at,"heating_factor") or default_ammo_heat, INI:r_string_ex(at,"wear_factor") or default_ammo_wear
end
--/ ----------------------------------------------------------
--/	----------------------------------------------------------
class "heat_ui" (CUIScriptWnd)

function heat_ui:__init(obj_hud) super(obj_hud)
	self.obj_hud = obj_hud
	self.to_render = false
	self.inv_hud = ActorMenu.get_actor_menu()
	self:InitControls()
end

function heat_ui:__finalize()
	if self.to_render then
		self.obj_hud:RemoveDialogToRender(self)
		self.to_render = false
    end
end

function heat_ui:show()
    if not self.to_render then
        self.obj_hud:AddDialogToRender(self)
        self.to_render = true
    end
end

function heat_ui:InitControls()
	self:SetWndRect(Frect():set(0, 0, device().width, device().height))
	--self:SetWndRect(Frect():set(0, 0, 1024, 768))
	xml = CScriptXmlInit()
	xml:ParseFile("ui_heating.xml")
	
	--// hud
	self.overlay = xml:InitStatic("static_weap_condition", self)
	self.pbar = xml:InitProgressBar("static_weap_condition:heat_progress", self.overlay)
	self.icon = xml:InitStatic("static_weap_condition:heat_icon", self.overlay)
	self.picon = xml:InitProgressBar("static_weap_condition:heat_icon_progress", self.overlay)
	
	self.overlay:Show(false)
	self.pbar:Show(false)
	self.icon:Show(false)
	self.picon:Show(false)
	
	--// inventory
	self.inv_static1 = xml:InitStatic("inv_static1",self.inv_hud)
	self.inv_static2 = xml:InitStatic("inv_static2",self.inv_hud)
	self.inv_static3 = xml:InitStatic("inv_static3",self.inv_hud)
	self.inv_static4 = xml:InitStatic("inv_static4",self.inv_hud)
	self.inv_pbar1 = xml:InitProgressBar("inv_static1:inv_heat_progress1",self.inv_static1)
	self.inv_pbar2 = xml:InitProgressBar("inv_static2:inv_heat_progress2",self.inv_static2)
	self.inv_pbar3 = xml:InitProgressBar("inv_static3:inv_heat_progress3",self.inv_static3)
	self.inv_pbar4 = xml:InitProgressBar("inv_static4:inv_heat_progress4",self.inv_static4)
	
	self.inv_static1:Show(false)
	self.inv_static2:Show(false)
	self.inv_static3:Show(false)
	self.inv_static4:Show(false)
	self.inv_pbar1:Show(false)
	self.inv_pbar2:Show(false)
	self.inv_pbar3:Show(false)
	self.inv_pbar4:Show(false)
end

function heat_ui:Update()
	if not(weap_table) or device():is_paused() then return end
--
	if new_wpn_id and weap_table[del_wpn_id] then 	--fix for AO/CWP parent weapons
		weap_table[new_wpn_id] = weap_table[del_wpn_id]
		weap_table[del_wpn_id] = nil
		new_wpn_id = nil
		del_wpn_id = nil
	end
--
	CUIScriptWnd.Update(self)
	local tg = time_global()
	if not(self._timer) or table.size(weap_table) == 0 then
		self._timer = tg
		return
	end
	if (tg - self._timer) > cool_cyc then
		self._timer = tg
		if not heat_active then return end
		self:slotted_wpns()
		self:cooling()
	end
end

function heat_ui:slotted_wpns()
	local slot1_obj, slot2_obj, slot3_obj, slot5_obj = db.actor:item_in_slot(1), db.actor:item_in_slot(2), db.actor:item_in_slot(3), db.actor:item_in_slot(5)
	self.slot1_id, self.slot2_id, self.slot3_id, self.slot5_id = slot1_obj and slot1_obj:id(), slot2_obj and slot2_obj:id(), slot3_obj and slot3_obj:id(), slot5_obj and slot5_obj:id()
end

function heat_ui:cooling()
	cool_active = true
	local hud_on = false
	for w_id,v in pairs (weap_table) do									-- table of hot weapons
		if not heat_active[w_id] then
			local weap_obj = level.object_by_id(w_id)
			if weap_obj then											-- weapon is online
				local diff = v.cond - weap_obj:condition()				-- fix for condition drop before cool?
				local _heating = v.real - v.cond
				if _debug then printf("cooling:: id:%s heating:%s realCond:%s curCond:%s[%s] active:%s",w_id,_heating,v.real,v.cond,diff,heat_active[w_id]) end
				if _heating > 0 then									-- weapon is hot
					v.cond = v.cond + v.cool + (v.cool * _heating)		-- condition after cooling
					if v.cond > v.real then
						v.cond = v.real
					end
					v.cond = math.clamp(v.cond - diff, 0, 1.0)
					weap_obj:set_condition(v.cond)						-- set temporary condition
					weap_table[w_id] = v								-- update table for weapon
					hud_on = hud_on or self:progress_bars(w_id)			-- display weapon heating
				else													-- clear cool weapons
					weap_obj:set_condition(v.real)
					weap_table[w_id] = nil
					smoke_tbl[w_id] = nil		--smoking weapon
				end
				if _debug then printf("cooling::after: id:%s heating:%s realCond:%s currCond:%s",w_id,_heating,v.real,v.cond) end
			else
				local s_obj = alife_object(w_id)
				local t = stpk_utils.get_object_data(s_obj)
				if (t) then												-- weapon is offline
					if v.real then
						t.condition = v.real
						stpk_utils.set_object_data(t,s_obj)				-- reset condition
					end
				end	
				weap_table[w_id] = nil
				smoke_tbl[w_id] = nil			--smoking weapon
			end
		end
	end
	if not hud_on then
		self.overlay:Show(false)
		self.pbar:Show(false)
		self.icon:Show(false)
		self.picon:Show(false)
	end
	if table.size(weap_table) == 0 then
		self:__finalize()
	end
	cool_active = nil
end

function heat_ui:clear_hud(w_id,weap_obj)
	if (self.inv_hud and self.inv_hud:IsShown()) then
		self.overlay:Show(false)
		self.pbar:Show(false)
		self.icon:Show(false)
		self.picon:Show(false)
	else
		self.inv_static1:Show(false)
		self.inv_static2:Show(false)
		self.inv_static3:Show(false)
		self.inv_static4:Show(false)
		self.inv_pbar1:Show(false)
		self.inv_pbar2:Show(false)
		self.inv_pbar3:Show(false)
		self.inv_pbar4:Show(false)
		--if active_wpn_id ~= w_id or active_wpn_id == 0 then
		--	self.overlay:Show(false)
		--	self.pbar:Show(false)
		--	self.icon:Show(false)
		--	self.picon:Show(false)
		--end
	end
end

function heat_ui:id_heat_check(id)
	if id == nil then return 0 end
	local stats = weap_table[id]
	return stats and (stats.real - stats.cond) * 100 or 0
end

function heat_ui:progress_bars(w_id)
	--self.inv_hud = ActorMenu.get_actor_menu()
	local ai = db.actor:active_item()
	active_wpn_id = ai and ai:id()
	self:clear_hud(w_id)
	local hud_on = false
	local heat_lvl = self:id_heat_check(w_id) or 0
	if _debug then printf("heat_ui:progress_bars::(%s) heat_lvl:%s", w_id, heat_lvl) end
	if (self.inv_hud and self.inv_hud:IsShown()) then	-- show in inventory
		local heat1 = self:id_heat_check(self.slot1_id)
		local heat2 = self:id_heat_check(self.slot2_id)
		local heat3 = self:id_heat_check(self.slot3_id)
		local heat4 = self:id_heat_check(self.slot5_id)
		local bar1, bar2, bar3, bar4 = heat1 > disp_inv_bar, heat2 > disp_inv_bar, heat3 > disp_inv_bar, heat4 > disp_inv_bar
		self.inv_static1:Show(bar1)
		self.inv_pbar1:Show(bar1)
		if bar1 then self.inv_pbar1:SetProgressPos(heat1) end
		self.inv_static2:Show(bar2)
		self.inv_pbar2:Show(bar2)
		if bar2 then self.inv_pbar2:SetProgressPos(heat2) end
		self.inv_static3:Show(bar3)
		self.inv_pbar3:Show(bar3)
		if bar3 then self.inv_pbar3:SetProgressPos(heat3) end
		self.inv_static4:Show(bar4)
		self.inv_pbar4:Show(bar4)
		if bar4 then self.inv_pbar4:SetProgressPos(heat4) end
		if smoke_tbl and smoke_tbl[w_id] then
			--for k, v in ipairs(smoke_tbl[w_id]) do
			for k=1, #smoke_tbl[w_id] do
				local v = smoke_tbl[w_id][k]
				if v and (heat_lvl < k*smk_lvl) and v:playing() then
					v:stop()
				end
			end
		end
	else											-- show on HUD
--//---------------------	progress bar and icon on hud	--------------------
		if UI_BAR == true and active_wpn_id == w_id then
			local di, d_b = heat_lvl > display_icon, heat_lvl > display_bar
			self.icon:Show(di)
			self.picon:Show(di)
			if di then self.picon:SetProgressPos(heat_lvl) end
			self.overlay:Show(d_b)
			self.pbar:Show(d_b)
			if d_b then self.pbar:SetProgressPos(heat_lvl) end
			hud_on = di or d_b
		end
--//----------------------	smoking weapon	-------------------------------
		if heat_lvl > smk_lvl and not (smoke_tbl[w_id]) then
			smoke_tbl[w_id] = {}
		end
		if smoke_tbl[w_id] then
			local w_obj = level.object_by_id(w_id)
			local bone_pos = w_obj and weap_table[w_id] and alun_utils.safe_bone_pos(w_obj,weap_table[w_id].bone)
			local v1 = bone_pos and alun_utils.string_to_vector(weap_table[w_id].offset) or VEC_ZERO --vector()
			if heat_lvl < 100 and heat_lvl > (smk_lvl*(#smoke_tbl[w_id]+1)) then
--				table.insert(smoke_tbl[w_id], particles_object("industrial_particles\\exhaust_workshop_1_small"))
--				table.insert(smoke_tbl[w_id], particles_object("industrial_particles\\weapon_smoke"))
				smoke_tbl[w_id][#smoke_tbl[w_id]+1] = particles_object("industrial_particles\\weapon_smoke")
			end
--			for k, v in ipairs(smoke_tbl[w_id]) do
			for k=1, #smoke_tbl[w_id] do
				local v = smoke_tbl[w_id][k]
				if bone_pos and heat_lvl >= k*smk_lvl then
					if not (v:playing()) then
						v:play_at_pos(bone_pos)
					end
					
					local vec = w_id == active_wpn_id and device().cam_dir or VEC_ZERO --vector():set(0,0,0)
					bone_pos = vector():set(bone_pos.x+v1.x,bone_pos.y+v1.y,bone_pos.z+v1.z) or VEC_ZERO --vector():set(0,0,0)
					v:move_to(bone_pos:add(vec), VEC_ZERO) --vector():set(0,0,0)
				else
					if v:playing() then
						v:stop()
					end
				end
			end
		end
--//----------------------------------------------------------------------------
	end
end