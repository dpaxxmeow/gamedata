--// --------------------- Sleep deprivation for A.R.E.A.	----------------------
--// author	: 	Nuor
--// version:	1.25 (alt)
--// created:	4-09-2016
--// last edit:	14-02-2022
--//------------------------------------------------------------------------------
last_sleep, no_sleep, caff_chk 	= 0,0,0 -- to change defaults, edit below in 'activate_feature' function
local force,start_blur,itn_mul,pwr_rate,rng_factor,caff_max,last_warning,die_chance,last_chk,pwr_chk, _tmr
--sleep_mul = 0
feature_is_active = false

function on_game_start()
	if (axr_main.config:r_value("mm_options","enable_sleep_deprived",1,false) == false) then
		return 
	end
	
	local function actor_on_first_update()
		if GodMode() then force = 60 return end
		activate_feature()
		if last_sleep > start_blur then
			local coeff = area_skills and area_skills.skills_table and 1+area_skills.skills_table.survival_skill/25 or 1
			level.add_pp_effector("yantar_underground_psi.ppe", 1999, true)
			level.set_pp_effector_factor(1999, (last_sleep-start_blur) * itn_mul * coeff)
			if last_sleep >= (force - last_warning + 1) then
				SetHudMsg(game.translate_string("st_sleep_exhausted_final"),5)
			else
				SetHudMsg(game.translate_string("st_sleep_exhausted"),4)
			end
			local cactor = db.actor:cast_Actor():conditions()
			local pwr = cactor[ "GetMaxPower" ] and cactor[ "GetMaxPower" ](cactor)
			cactor[ "SetMaxPower" ](cactor,pwr - sleep_penalty*(last_sleep-start_blur))
		end
	end
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update,true)
end

local function main_loop()
		
	if not (db.actor) or GodMode() then
		return false
	end 
	
	local tg = time_global()
	--[[//	drain power when exhausted
	if last_sleep > start_blur then
		if (pwr_chk == nil or tg > pwr_chk) then 
			--local coeff = area_skills and 1+area_skills.skills_table.survival_skill/25 or 1
			if (db.actor.power > 0) then
				db.actor.power = pwr_rate*(1+((last_sleep-start_blur)*rng_factor))-- * coeff
			end
			pwr_chk = tg+100
		end
	end
--]]
	
	if (_tmr and tg < _tmr) then 
		return false 
	end

	_tmr = tg + 2000

	local cactor = db.actor:cast_Actor():conditions()
--	local pwr = cactor and cactor[ "GetMaxPower" ] and cactor[ "GetMaxPower" ](cactor)
--	printf("power:%s",pwr)
	--printf("last_chk=%s last_sleep=%s",last_chk and game.get_game_time():diffSec(last_chk) or "nil",last_sleep)
	if db.actor:has_info("actor_is_sleeping") then
		if has_alife_info("force_slp") then disable_info("force_slp") end
		last_sleep 	= 0
		local cactor = db.actor:cast_Actor():conditions()
		if cactor and cactor[ "GetMaxPower" ] then
			cactor[ "SetMaxPower" ](cactor,1)
		end
		level.remove_pp_effector(1999)
		area_breath_hold.load_pulse()
	end

	if (last_chk and game.get_game_time():diffSec(last_chk) < 3600) then 
		return false
	end
	
	last_chk = game.get_game_time()

	last_sleep = math.round(last_sleep + 1) -- + sleep_mul)
	test_blur()
	
	return false
end
-- exports to engine
function ExportSleep()
	return force and (force - last_sleep) / force or 1
end

function activate_feature()
	if (feature_is_active) then
		return 
	end
	feature_is_active = true
	no_sleep 				= 7 				--// change "no_sleep" to 0 to allow sleep spam
	caff_chk 				= caff_chk or 0 	--//
	force					= 60 + utils.load_var(db.actor,"bonus_sleep",0) --// time between sleeps that triggers passing out
	start_blur 				= 20				--// time between sleeps when vision blur starts 
	itn_mul 				= 0.05				--// blur intensity multiplier
	pwr_rate,rng_factor 	= -0.00065, 0.08	--// power reduction rate ,high/low range multiplier - lower is flatter
	caff_max				= 5					--// max energy drinks per hr
	last_warning 			= 3					--// # of hourly warnings before passing out
	die_chance 				= 0.01				--// chance of dying if actor passes out
	sleep_penalty			= 0.01				--// reduction in max power for every hour of exhaustion (start_blur >).

	RegisterScriptCallback("actor_on_item_use",actor_on_item_use)
	RegisterScriptCallback("save_state",save_state)
	AddUniqueCall(main_loop)
end 

function deactivate_feature()
	if not (feature_is_active) then
		return 
	end
	feature_is_active = false
		
	RemoveUniqueCall(main_loop)
	UnregisterScriptCallback("actor_on_item_use",actor_on_item_use)
	if (USE_MARSHAL) then
		UnregisterScriptCallback("save_state",save_state)
		UnregisterScriptCallback("load_state",load_state)
	end
	alife_storage_manager.get_state().sleep_deprived = nil
end 

----// add to bind_stalker or bind_stalker_ext save/load if used. //--
function save(package)	-- sleep_dep.save -> actor_binder:save()
	if (USE_MARSHAL) then
		return
	end
	package:w_u8(last_sleep)
	package:w_u16(last_chk)
	package:w_u8(caff_chk)
end
function load(package)	-- sleep_dep.load -> actor_binder:load()
	if (USE_MARSHAL) then
		return
	end
	last_sleep  = package:r_u8() or 0
	last_chk 	= package:r_u16() or 0
	caff_chk 	= package:r_u8() or 0
end
--//--------------------------------------------------------------//--
function save_state(m_data)
	if (USE_MARSHAL) then
		m_data.sleep_deprived = {}
		m_data.sleep_deprived.last_sleep = last_sleep
		m_data.sleep_deprived.caff = caff_chk
		m_data.sleep_deprived.last_chk = last_chk
		--m_data.sleep_mul = sleep_mul
	end
end

function load_state(m_data)
	if (USE_MARSHAL and m_data.sleep_deprived) then
		last_sleep = m_data.sleep_deprived.last_sleep or 0
--		printf("load state last_sleep [%s]", last_sleep)
		caff_chk = m_data.sleep_deprived.caff or 0
		last_chk = m_data.sleep_deprived.last_chk or game.get_game_time()
		m_data.sleep_deprived = nil
		--sleep_mul = m_data.sleep_mul or 0
	end
end

function actor_on_item_use(item)
	if not item or GodMode() then return end
	local value = INI:r_float_ex(item:section(), "eat_sleepiness", false)
	if value then
		--printf("!eat_sleepiness value = [%s]",value)
		caff_chk = caff_chk - value
		if caff_chk < 0 then caff_chk = 0 end
		if caff_max > caff_chk then
			last_sleep = last_sleep + value
		else
			return
		end
		test_blur()
	end
end

function test_blur()
	local coeff = area_skills and area_skills.skills_table and 1+area_skills.skills_table.survival_skill/25 or 1
	level.remove_pp_effector(1999)
	local cactor = db.actor:cast_Actor():conditions()
	if last_sleep > force then
		force_sleep()
	elseif last_sleep > start_blur then
		level.add_pp_effector("yantar_underground_psi.ppe", 1999, true)
		level.set_pp_effector_factor(1999, (last_sleep-start_blur) * itn_mul * coeff)
		if last_sleep >= (force - last_warning + 1) then
			SetHudMsg(game.translate_string("st_sleep_exhausted_final"),5)
		else
			SetHudMsg(game.translate_string("st_sleep_exhausted"),4)
		end
		local pwr = cactor[ "GetMaxPower" ] and cactor[ "GetMaxPower" ](cactor)
		cactor[ "SetMaxPower" ](cactor,pwr - sleep_penalty)
		printf("max power:%s",cactor[ "GetMaxPower" ](cactor))
	else
		cactor[ "SetMaxPower" ](cactor,1)
	end
end

function force_sleep()
	local coeff = area_skills and area_skills.skills_table and 1+area_skills.skills_table.survival_skill/50 or 1
	db.actor:give_info_portion("force_slp")
	ui_sleep_dialog.sleep_forced()
	if GodMode() or not die_chance then return end
	
	if (math.random(1,1000)/1000)*coeff < die_chance then
		SetHudMsg(game.translate_string("st_sleep_deprived"),10)
		db.actor:kill(db.actor)
	else 
		area_skills.raise_skill("survival_skill",0.2)
	end
end