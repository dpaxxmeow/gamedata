--Ammo dampness
--//Refactoring by MAGILA 19.11.2022
local ammo_drying = {}

local function save_state(m_data)
	m_data.ammo_drying = ammo_drying
end

local function load_state(m_data)
	ammo_drying = m_data.ammo_drying or {}
end

local function update()
	--Let's dry the ammo
	for id, g_time in pairs(ammo_drying) do
		if id and g_time then
			if game.get_game_time():diffSec(g_time) > 300 then -- 5 minutes
				local se_item = alife_object(id)
				if IsAmmo(se_item) and se_item.parent_id == 65535 then
					local item = level.object_by_id(id)
					local cnt = item and item:ammo_get_count()
					if cnt then
						local sec = item:section():exclude("_bad")
						-- printf("- ammo_dampness->section : %s", sec)
						alife():release(se_item, true)
						create_ammo(sec, item:position(), item:level_vertex_id(), item:game_vertex_id(), 65535, cnt)
						ammo_drying[id] = nil
					end
				end
			end
		end
	end

	return is_empty(ammo_drying)
end

local function limit_up()
	return LimitUpdate(update, 20)--LIMITED 20 second
end
 
local function take_damp_ammo(item)
	if IsAmmo(item) then
		local id = item:id()
		if ammo_drying[id] then
			ammo_drying[id] = nil
		end
	end
end

local function drop_damp_ammo(item)
	if is_empty(bind_campfire.campfires_all) or (not IsAmmo(item)) or (not item:section():ended_with("_bad")) then
		return
	end

	-- printf("- ammo_drop_bad : %s", item:section())
	local pos = item:position()
	for _, binder in pairs(bind_campfire.campfires_all) do
		--printf("camp_check:%s distance:%s",id,pos:distance_to_sqr(binder.object:position()))
		if (pos:distance_to_sqr(binder.object:position()) <= 18) then	
			if (binder.campfire:is_on()) then
				local item_id = item:id()
				ammo_drying[item_id] = game.get_game_time()
				-- printf("- near_camp : %s", item_id)
				break
			end
		end
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", function()
		AddUniqueCall(function()
			LimitUpdate(update, 20)--LIMITED 20 second
		end)
	end)

	RegisterScriptCallback("actor_on_item_drop", drop_damp_ammo)
	RegisterScriptCallback("actor_on_item_take", take_damp_ammo)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("save_state", save_state)
end